[
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Synchronise your local branch with changes to the remote `test`:\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`fetch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`test`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`master`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`origin`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`merge`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Complete the process to apply the changes to your local branch `master`:\n\n    $ git ??? origin\n    $ git ???\n",
      "answers": [
          {
              "text": "`fetch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`merge`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`commit`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`master`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Show the last commit on each branch:\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`branch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-v`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`--merged`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`commit`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What does the asterisk mean?\n\n    $ git branch \n    '*' master \n    test\n\n???\n",
      "answers": [
          {
              "text": "`master` is checked out",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`test` is merged with `master`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`master` has modified files",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "To `fetch` and `merge` master branch automatically you run :\n\n    $ ??? ??? ???\n",
      "answers": [
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`pull`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`origin`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`merge`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`checkout`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "To automatically `merge` the commits from the master branch you would use :\n\n    $ git ??? origin\n",
      "answers": [
          {
              "text": "`pull`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`push`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`get`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`merge`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "what does the -a flag in the following command stand for?\n\nWhat option related to fetching is `-a` shorthand for in the following command?\n\n```bash\n$ git pull -a\n```\n\n ???\n",
      "answers": [
          {
              "text": "--append",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "--amend",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "--all",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "--autostash",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Share a branch `test` with the remote `origin` :\n\n    $ git ??? ??? ???\n",
      "answers": [
          {
              "text": "`push`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`origin`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`test`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`master`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`branch`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`commit`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Push the branch `test` to the remote under the name `fix` :\n\n    $ git push origin\n             ???:???\n",
      "answers": [
          {
              "text": "`test`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`fix`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`rename`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "    $ git ??? ??? \n            ???/???\n\nis used to set the current branch to follow the remote branch *newFeature*.\n",
      "answers": [
          {
              "text": "`branch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-u`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`origin`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`newFeature`",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "`checkout`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-upstream`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "`git clone` and `git checkout` commands on a remote repository set up a ??? branch automatically.\n",
      "answers": [
          {
              "text": "tracking",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "single",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "false",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "`git rebase master`\nrestores the current branch to the last ??? shared by the two branches, then ??? the changes made on top of master into the current branch.\n",
      "answers": [
          {
              "text": "commit",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "merges",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "checkout",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "deletes",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "branching",
      "author": "rosielowther",
      "category": "must-know",
      "question": "A way to combine two branches by reapplying the ahead commits of the current branch to the head of the other branch is:\n\n    #checkout to the branch ahead\n    $ git checkout scrollFix \n    $ ??? ??? master\n",
      "answers": [
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`rebase`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`rewind`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`redo`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`checkout`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "commits",
      "author": "rosielowther",
      "category": "feature",
      "question": "The commit cherry-picked in the example was applied on ???.\n",
      "answers": [
          {
              "text": "master",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "other branch",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "commits",
      "author": "rosielowther",
      "category": "feature",
      "question": "To apply a *single* commit (from another branch) on the current branch, you use\n\n    $ git ??? a456bd7\n",
      "answers": [
          {
              "text": "`cherry-pick`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`pick`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`merge`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "commits",
      "author": "rosielowther",
      "category": "feature",
      "question": "You can add a commit message template using:\n\n    $ git ??? --global\n      ???.???  ~/.template.txt\n",
      "answers": [
          {
              "text": "`config`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`commit`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`template`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`-co`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "commits",
      "author": "rosielowther",
      "category": "feature",
      "question": "You can add a commit message template using:\n\n    $ git ??? --global\n      ???.???  ~/.template.txt\n",
      "answers": [
          {
              "text": "`config`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`commit`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`template`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`-co`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "commits",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Commit the changes with the message \"issue no.8 fixed\" :\n\n    $ git ??? ??? \n                ???\n",
      "answers": [
          {
              "text": "`commit`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-m`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`\"issue no.8 fixed\"`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "-message",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "commits",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Commit the changes with the message \"typo fixed\"\n\n    $ ??? ??? \n            ??? ???\n",
      "answers": [
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`commit`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-m`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`\"typo fixed\"`",
              "correct": true,
              "correctIndex": 3
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "commits",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Git *hashing* is based on the ??? of a file or directory structure .\n",
      "answers": [
          {
              "text": "content",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "name",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "date of creation",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "commits",
      "author": "rosielowther",
      "category": "must-know",
      "question": "The usual commit object contains a hash-code, author’s name and email, date and ??? .\n",
      "answers": [
          {
              "text": "description",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "SHA-1",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "checksum",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What does this code do?\n\n    $ git remote add test\n         https://git.enki.com\n\n???\n",
      "answers": [
          {
              "text": "Adds a remote repository `test`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Clones a remote repository `origin`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Tests the remote repository `enki.com`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Add the remote repository and give it a shortname `experiment` :\n\n    $ git ??? ??? ???\n         https://git.enki.com\n",
      "answers": [
          {
              "text": "remote",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "add",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "experiment",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "clone",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "test",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "origin",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "catalin",
      "category": "must-know",
      "question": "To get data from a remote repository, and also merge it, you would use:\n\n    $ git ???\n",
      "answers": [
          {
              "text": "pull",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "fetch",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "clone",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "merge",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "rebase",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "push",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "catalin",
      "category": "must-know",
      "question": "What command is used to **get** new data from a remote Git repository, but not merge it automatically?\n\n    $ git ???\n",
      "answers": [
          {
              "text": "fetch",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "pull",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "merge",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "commit",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "add",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "clone",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Find a tag that includes `\"fix\"` :\n\n    $ git tag ??? ???\n",
      "answers": [
          {
              "text": "-l",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "'\"fix\"'",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "--fix",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "-m",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Search for all the tags of version 2 :\n\n    $ git tag ??? ???\n",
      "answers": [
          {
              "text": "-l",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "v2*",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "-m",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Alter the previous commit to correct the commit message typo\n\n    $ git commit -m 'Add nwe frmat'\n    $ git ???\n    # Editor\n    'Add new game format'\n",
      "answers": [
          {
              "text": "commit --amend",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "commit --undo",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "commit --edit",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "When would you use `git --amend` ?\n\n    ??? \n",
      "answers": [
          {
              "text": "To edit the most recent commit.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "To change the content of a file.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "To notify other members of the team.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Set your username :\n\n    $ git ??? ??? \n          ??? 'my username'\n",
      "answers": [
          {
              "text": "config",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "--global",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "user.name",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "username",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "-m",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "user",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Set your email :\n\n    $ git ??? ??? \n          ??? 'me@email.com'\n",
      "answers": [
          {
              "text": "config",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "--global",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "user.email",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "email",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "-m",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "user",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Why isn't reverting a file to its old version good practice?\n\n???\n",
      "answers": [
          {
              "text": "The deleted changes can't be recovered.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "It can have unexpected results.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "The command doesn't work on all files.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Revert `README.md` to its previous version :\n\n    $ git ??? -- README.md\n",
      "answers": [
          {
              "text": "checkout",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "revert",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "remove",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "To track the `.gitignore` file you’d run :\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "add",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": ".gitignore",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "track",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "-add",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "To exclude files from your repository, you have to add them to the ??? file .\n",
      "answers": [
          {
              "text": ".gitignore",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "hooks",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": ".gitexclude",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Preview the result of the following command:\n\n    $ git rm -r resources/ ???\n",
      "answers": [
          {
              "text": "--dry-run",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "remove",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "delete",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "--prev",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "How do you preview the results of a command?\n\n    $ git clean -fd ???\n",
      "answers": [
          {
              "text": "--dry-run",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "--prev",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "after",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "reflog",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What does this command do?\n\n    $ git push enki master\n\n???\n",
      "answers": [
          {
              "text": "Shares `master` branch with `enki` repo.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Shares `enki` branch with `master` repo.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Gets `master` branch from `enki` repo.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Get the data from the remote repository `enki`:\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "fetch",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "enki",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "origin",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "grab",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "push",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "receive",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "How do you remove the remote repository `enki`?\n\n    $ ???\n",
      "answers": [
          {
              "text": "git remote rm enki",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "git remote --delete enki",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "git untrack enki",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "git remove enki",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "git delete enki",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Rename the remote repository `origin` to `enki`\n\n    $ git remote ??? ???\n                         ???\n",
      "answers": [
          {
              "text": "rename",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "origin",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "enki",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "amend",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "old",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "new",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "rm",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Go through the basic commit process:\n\n    # enki.md modified\n    $ git ??? enki.md\n    $ git ??? ??? 'Changed enki.md'\n",
      "answers": [
          {
              "text": "add",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "commit",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "-m",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "save",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "-l",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "stage",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "dummy-workout",
      "author": "rosielowther",
      "category": "must-know",
      "question": "In the basic committing process, what are the three states a file can be found in?\n\n    $ git status\n    working directory clean\n\n    $ touch README.md\n    # README.md is ???\n\n    $ git add README.md\n    # README.md is ???\n\n    $ git commit -m 'Readme'\n    # README.md is ???\n",
      "answers": [
          {
              "text": "modified",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "staged",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "committed",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "shared",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "saved",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-i",
      "author": "rosielowther",
      "category": "must-know",
      "question": "View the latest commit on master as of 3 days ago:\n\n    $ git ??? ???@{3.days.ago}\n",
      "answers": [
          {
              "text": "`show`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`master`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`reflog`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`log`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-i",
      "author": "rosielowther",
      "category": "must-know",
      "question": "View the 6th previous value of HEAD:\n\n    $ git ??? ???@{6}\n",
      "answers": [
          {
              "text": "`show`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`HEAD`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`log`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`reflog`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`branch`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-i",
      "author": "catalin",
      "category": "feature",
      "question": "To just apply a commit without merging or rebase you can use `git ???`.\n",
      "answers": [
          {
              "text": "`cherry-pick`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`diff`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`commit --amend`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`revert`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`add`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-i",
      "author": "catalin",
      "category": "feature",
      "question": "Complete the code snippet such that the command, if ran, will show the latest commits on **all** branches:\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`branch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-v`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-all`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`list`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`commit`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`all`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`diff`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-i",
      "author": "catalin",
      "category": "must-know",
      "question": "Can wildcards be used inside the `.gitignore` file?\n\n???\n",
      "answers": [
          {
              "text": "Yes",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "No",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Only in newer versions of Git",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-i",
      "author": "catalin",
      "category": "must-know",
      "question": "What file is used to tell git to ignore certain files in your project?\n\n???\n",
      "answers": [
          {
              "text": "`.gitignore`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`.git`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`.ignore`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-i",
      "author": "mihaiberq",
      "category": "must-know",
      "question": "Is the following statement true or false?\n\nReverting a commit means deleting the entire history of commits between that commit and the newly added one.\n\n???\n",
      "answers": [
          {
              "text": "False",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "True",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "It depends on the case",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-i",
      "author": "mihaiberq",
      "category": "must-know",
      "question": "Complete the command that would delete any record of uncommitted changes made since the last commit:\n\n```bash\n$ git ???\n```\n",
      "answers": [
          {
              "text": "`reset --hard HEAD`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`reset --soft HEAD`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`reset HEAD`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`reset`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-i",
      "author": "Bruno",
      "category": "tip",
      "question": "Enable *sparse checkout* then choose to checkout only the `newFeature/` subdirectory:\n\n    $ git ???\n          ???.??? true\n    $ echo ??? >>\n           .git/info/sparse-checkout\n",
      "answers": [
          {
              "text": "`config`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`core`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`sparsecheckout`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`newFeature/`",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "`.git/newFeature`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-i",
      "author": "Bruno",
      "category": "tip",
      "question": "Directories not specified in the `sparse-checkout` file are\n\n???\n",
      "answers": [
          {
              "text": "ignored",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "the only ones pulled",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "immutable",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "To retrieve all the logs starting from last week until yesterday, you would run:\n\n    $ git ??? --since=??? \n         ???=\"yesterday\"\n",
      "answers": [
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`\"last week\"`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`--until`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`until`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`logs`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "`git` ??? understand relative dates like `\"yesterday\"` and `\"1month6days ago\"`.\n",
      "answers": [
          {
              "text": "can",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "can’t",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-ii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "You can flag a commit as *broken* using :\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`bisect`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`bad`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`Bisect`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-b`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-ii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "`$ git ???` \n\nhelps finding a commit that introduced a bug using ??? search.\n",
      "answers": [
          {
              "text": "`bisect`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`binary`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-binary`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-B`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "`*.png diff=exif`  should be added to\n\n??? file.\n",
      "answers": [
          {
              "text": ".gitattributes",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": ".git/config",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": ".gitignore",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "`ExifTool` can be used to ??? from a photo and convert it into text.\n",
      "answers": [
          {
              "text": "extract metadata",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "extract pixels",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "extract color codes",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-ii",
      "author": "JyotiBajaj",
      "category": "tip",
      "question": "Complete the command to see the changes made to a file and by whom:\n\n    $ ??? ??? \n             src/myPackage/Main.java\n",
      "answers": [
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`blame`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`check`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`add`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-ii",
      "author": "JyotiBajaj",
      "category": "tip",
      "question": "`git blame` shows\n\n ???\n",
      "answers": [
          {
              "text": "changes made to a file and by whom",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "active developers for the repository",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "nothing",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "How would you bundle the whole `newFeature` branch?\n\n    $ git bundle ??? \n       FeatureBranch ??? ???        \n",
      "answers": [
          {
              "text": "`create`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`HEAD`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`newFeature`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`-create`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`head`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "To verify if `newBundle` is a valid bundle, you would run\n\n    $ git ??? ??? ../newBundle\n",
      "answers": [
          {
              "text": "`bundle`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`verify`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-b`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--verify`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-iii",
      "author": "rosielowther",
      "category": "how to",
      "question": "Default hooks are generated by running \n\n    $ ??? ???\n",
      "answers": [
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`init`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`hooks`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`get`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-iii",
      "author": "rosielowther",
      "category": "how to",
      "question": "Default hooks are generated by running \n\n    $ ??? ???\n",
      "answers": [
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`init`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`hooks`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`get`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-iii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Transfer all your tags to the remote  `origin` server :\n\n    $ git ??? ??? ???\n",
      "answers": [
          {
              "text": "`push`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`origin`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`--tags`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`master`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`v1.0`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-iii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What does this command do?\n\n    $ git push enki v1.2\n     \n\n???\n",
      "answers": [
          {
              "text": "Pushes tag `v1.2` to the remote `enki`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Pushes tag `enki` to the remote `v1.2`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Pushes tag `enki v1.2` to `origin`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-iii",
      "author": "rosielowther",
      "category": "feature",
      "question": "    $ git log master...myBranch\n\nWould print commits that\n\n???\n",
      "answers": [
          {
              "text": "Are in either one of them, but not in both",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Are in master, but not in myBranch",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Are in myBranch, but not in master",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Are in both of them",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-iii",
      "author": "rosielowther",
      "category": "feature",
      "question": "    $ git log ^master myBranch\n\nIs equivalent to\n\n???\n",
      "answers": [
          {
              "text": "`git log master..myBranch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`git log master...myBranch`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git log --not master myBranch`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-iii",
      "author": "rosielowther",
      "category": "feature",
      "question": "how can you specify a range of commits?\n\nConsider the following git history\n\n```bash\n*--*--*--A--*--*--*--B--*\n```\n\nWhich of the following commands should be used to log all commits between A and B (inclusive)?\n\n ???\n",
      "answers": [
          {
              "text": "git log A~..B",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "git log A..B",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "git log A…B",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "git log ^A B",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-iii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Hooks can be attached to the pre-commit and ???-commit phases.\n",
      "answers": [
          {
              "text": "post",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "pre",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "in",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "during",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-iii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Add a `v1.0` annotated tag to the commit `ac32b10`.\n\n    $ git ??? ??? ??? ac32b10\n",
      "answers": [
          {
              "text": "`tag`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-a`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`v1.0`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`-t`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`commit`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-iii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Complete the command to retrieve all tags that are part of `v2`:\n\n    $ git tag ??? ???\n",
      "answers": [
          {
              "text": "`-l`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`v2*`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`2`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "features-iii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "A hook is a custom ??? that fires when a certain ??? occurs.\n",
      "answers": [
          {
              "text": "script",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "action",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "error",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "fundamentals",
      "author": "catalin",
      "category": "must-know",
      "question": "Complete the command below in order to force the delete of `my-branch`:\n\n    $ git ??? ??? my-branch\n",
      "answers": [
          {
              "text": "`branch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-D`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-d`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-f`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`force`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`checkout`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "fundamentals",
      "author": "catalin",
      "category": "must-know",
      "question": "What command is used in **Git** to switch between branches?\n\n???\n",
      "answers": [
          {
              "text": "`git checkout`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`git branch`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git branch -m`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "fundamentals",
      "author": "catalin",
      "category": "must-know",
      "question": "You can store a snapshot of the data in the local repository by\n\n???\n",
      "answers": [
          {
              "text": "`committing`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`tracking`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`creating a Git repository`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`doing nothig, Git saves them automatically`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "fundamentals",
      "author": "catalin",
      "category": "must-know",
      "question": "How does **Git** think of data?\n\n???\n",
      "answers": [
          {
              "text": "as snapshots",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "as a set of files and changes made to them over time",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "fundamentals",
      "author": "catalin",
      "category": "must-know",
      "question": "What status does a file have if it was previously committed, but it is not currently staged?\n\n???\n",
      "answers": [
          {
              "text": "`Tracked`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`Untracked`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`Staged`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`Modified`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "fundamentals",
      "author": "catalin",
      "category": "must-know",
      "question": "How are changes added to a repository?\n\n???\n",
      "answers": [
          {
              "text": "Through a commit",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Automatically",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "By staging them",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "By putting them in the **working tree**",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "fundamentals",
      "author": "catalin",
      "category": "must-know",
      "question": "What is **Git**'s versioning based on?\n\n???\n",
      "answers": [
          {
              "text": "Content of the file",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Name of the file",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Both",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "fundamentals",
      "author": "catalin",
      "category": "must-know",
      "question": "What type of VCS is Git?\n\n???\n",
      "answers": [
          {
              "text": "DVCS",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "CVCS",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "LVCS",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Mix of CVCS and LVCS",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "fundamentals",
      "author": "catalin",
      "category": "thought",
      "question": "What *type* of VCS **only** makes use of a local database to keep changes of files under version control?\n\n???\n",
      "answers": [
          {
              "text": "Local Version Control",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Centralised Version Control",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Distributed Version Control",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "fundamentals",
      "author": "catalin",
      "category": "thought",
      "question": "In order to be considered in the git commit a file must be ?\n\n???\n",
      "answers": [
          {
              "text": "Tracked",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Untracked",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Marked",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Saved",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "getting-started",
      "author": "catalin",
      "category": "how to",
      "question": "Complete the command to change your username for all projects:\n\n    $ git ??? ??? \\\n      user.??? \"My Name\"\n",
      "answers": [
          {
              "text": "`config`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--global`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`name`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`user`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`username`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`me`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--all`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--general`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`set`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "getting-started",
      "author": "catalin",
      "category": "how to",
      "question": "What `Git` command is used to change various configuration options?\n\n???\n",
      "answers": [
          {
              "text": "`git config`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`git --global`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git settings`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git custom`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git set`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "getting-started",
      "author": "catalin",
      "category": "must-know",
      "question": "What's the last step **Git** automatically does after running `git clone`?\n\n???\n",
      "answers": [
          {
              "text": "checks out a working copy of the latest version of the project",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "initializes the `.git` directory",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "pulls repository data in the `.git` directory",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "create a new folder directory",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "getting-started",
      "author": "catalin",
      "category": "must-know",
      "question": "Does running `git clone` with a repository's URL require having an existing working copy on you machine?\n\n???\n",
      "answers": [
          {
              "text": "No",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Yes",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Only if you don't provide a new new directory name",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "getting-started",
      "author": "catalin",
      "category": "must-know",
      "question": "What will running `$ git init` do?\n\n???\n",
      "answers": [
          {
              "text": "setup **Git** and bring your project under its Source Control",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "upload your project to the **Git** server",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "download a sample project from the web",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "link you project to **GitHub**",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "getting-started",
      "author": "catalin",
      "category": "must-know",
      "question": "What command is used to initialize **Git** for a project?\n\n???\n",
      "answers": [
          {
              "text": "`git init`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`git start`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git new`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git initalize`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git initalise`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "getting-started",
      "author": "catalin",
      "category": "must-know",
      "question": "Will **Git** also be installed when you would install **GitHub** ?\n\n???\n",
      "answers": [
          {
              "text": "Yes",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "No",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Only on Mac OS X",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Only on Linux",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "getting-started",
      "author": "catalin",
      "category": "must-know",
      "question": "What other name does the **staging area** have?\n\n???\n",
      "answers": [
          {
              "text": "index",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "HEAD",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "tag",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "stage",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "local-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "Write the command to commit all tracked files:\n\n    $ ??? ??? ???\n",
      "answers": [
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`commit`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-a`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-h`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`branch`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git-commit`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`add`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "local-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "What flag is used to commit with a message specified within the command?\n\n    $ git commit ??? \"the message\"\n",
      "answers": [
          {
              "text": "`-m`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-a`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-message`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-h`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-d`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "local-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "Complete the code snippet below so it removes the most recent set of changes in the stash:\n\n    $ git stash ??? ???@???\n",
      "answers": [
          {
              "text": "`drop`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`stash`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`{1}`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`{0}`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`list`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`pop`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`status`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "local-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "Complete the command below such as the most recent set of changes in the stash are applied:\n\n    $ ??? ??? ???\n",
      "answers": [
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`stash`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`apply`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`pop`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git-stash`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`push`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`@{1}`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`list`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "local-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "The area where files you are working on is called the ???.\n",
      "answers": [
          {
              "text": "working tree",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "GitHub",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "working",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "staging",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "local-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "The area where 'to be committed' changes are placed is called ??? .\n",
      "answers": [
          {
              "text": "the staging area",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "the repository",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "the working directory",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "local-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "What's the command that will add all the files in the current directory to the staging area?\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`add`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`.`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`stage`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`commit`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`status`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-a`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "local-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "What git command can be used to check what files are untracked, modified or staged?\n\n    $ git ???\n",
      "answers": [
          {
              "text": "`status`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`checkout`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`stats`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`add`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`branch`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`list`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "local-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "Files that are not in the staging area and were not included in the last commit are:\n\n???\n",
      "answers": [
          {
              "text": "untracked",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "staged",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "added",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "tracked",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "modified",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "local-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "Using the `git add` command you include modified files to the ???.\n",
      "answers": [
          {
              "text": "staging area",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "git repository",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "working tree",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "GitHub",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "remote-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "You can have ??? remote repositories/repository.\n",
      "answers": [
          {
              "text": "multiple",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "only one",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "up to one hundred",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "remote-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "To check what files were not successfully merged automatically:\n\n    $ git ???\n",
      "answers": [
          {
              "text": "`status`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`merge`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`list`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`checkout`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`conflicts`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "remote-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "A merge operation will:\n\n???\n",
      "answers": [
          {
              "text": "merge target branch into the current one",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "merge current branch into the target one",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "create new branch combining the current and target branch",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "remote-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "What flag is used to set the upstream tracking branch on your current branch?\n\n    $ git push ??? origin feature\n",
      "answers": [
          {
              "text": "`--set-upstream`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-set-upstream`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-a`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-up`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-upstream`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-up-branch`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "remote-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "Complete the basic syntax for pushing in git:\n\n    $ git ??? ??? ???\n",
      "answers": [
          {
              "text": "`push`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`[remote-name]`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`[branch-name]`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`[local-repository]`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--set-upstream`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`origin`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`master`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`pull`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "remote-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "What's the command that will add all the files in the current directory to the staging area?\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`add`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`.`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`stage`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`commit`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`status`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-a`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "remote-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "What git command can be used to check what files are untracked, modified or staged?\n\n    $ git ???\n",
      "answers": [
          {
              "text": "`status`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`checkout`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`stats`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`add`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`branch`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`list`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "remote-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "What's the default name **Git** provides to the server you `clone` from?\n\n???\n",
      "answers": [
          {
              "text": "origin",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "master",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "remote",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "GitHub",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "essentials",
      "lesson": "remote-repository",
      "author": "catalin",
      "category": "must-know",
      "question": "What command is used to see the remote repositories for your project?\n\n    $ git ???\n",
      "answers": [
          {
              "text": "`remote`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`remotes`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`add`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`status`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`checkout`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "branches",
      "author": "rosielowther",
      "category": "feature",
      "question": "What does the next command do?\n\n    $ git checkout -\n\n???\n",
      "answers": [
          {
              "text": "Switches to the last branch.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Deletes the current branch.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Deletes the last branch.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "branches",
      "author": "rosielowther",
      "category": "must-know",
      "question": "`master` is used as ??? ,\n\n while `origin` as ??? .\n",
      "answers": [
          {
              "text": "default first branch name",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "default remote repository name",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "new branches’ default name",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "local folder name",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "branches",
      "author": "rosielowther",
      "category": "must-know",
      "question": "`master` is used as ??? ,\n\n while `origin` as ??? .\n",
      "answers": [
          {
              "text": "default first branch name",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "default remote repository name",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "new branches’ default name",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "local folder name",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "branches",
      "author": "rosielowther",
      "category": "hack",
      "question": "The order in which you would correct the mistake is :\n\n    ???\n    ???\n    ???\n",
      "answers": [
          {
              "text": "`git branch test`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`git reset --hard HEAD~`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`git checkout test`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`git reset --hard HEAD^^`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "branches",
      "author": "rosielowther",
      "category": "hack",
      "question": "A quick hack to revert the changes made to the current branch and move them to another is\n\n???\n",
      "answers": [
          {
              "text": "creating a new branch and resetting HEAD on master",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "deleting the current branch and switching to the master",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "resetting the last commit and moving to a new branch",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "branches",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Remove references to deleted branches:\n\n    $ git ??? origin ???\n",
      "answers": [
          {
              "text": "`fetch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--prune`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`prune`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--fetch`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "branches",
      "author": "rosielowther",
      "category": "must-know",
      "question": "    $ git fetch origin --prune\n\nRemoves references to ??? branches.\n",
      "answers": [
          {
              "text": "deleted",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "merged",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "existing",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "branches",
      "author": "rosielowther",
      "category": "feature",
      "question": "After running :\n\n    $ git branch -vv\n      master  2bcd45a [origin/master]\n      Bug resolved\n     * newfeature 12ac79d \n         [myServer/newFeature:ahead 2]\n         add new screen\n\nIt can be said that:\n\n`master` is ??? \n\n`newFeature` is ???.\n",
      "answers": [
          {
              "text": "up-to-date",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "ahead of the remote branch by 2 commits",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "behind of the remote branch by 2 commits",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "untracked",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "branches",
      "author": "rosielowther",
      "category": "feature",
      "question": "To see the status of your tracked branches in relation with their upstream counterpart, you would run\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`branch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-vv`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`--vv`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-branch`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "finding-commits",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Run the command to find out the unique abbreviation of a checksum :\n\n    $ git ??? ???\n          ???=???\n",
      "answers": [
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--abbrev-commit`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`--pretty`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`oneline`",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "`show`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "finding-commits",
      "author": "rosielowther",
      "category": "must-know",
      "question": "    $ git show \n    d921970aadf03b3cf0e71becdaab3147ba71cdef\n\n??? have the same result as:\n\n    $ git show d921970\n",
      "answers": [
          {
              "text": "will",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "will not",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "finding-commits",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Search for all commits with 'enki' in their commit message :\n\n    $ git ??? ??? \n",
      "answers": [
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--grep=enki`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`--grep`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`'enki'`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m``",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "finding-commits",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What does this code do?\n\n    $ git log --pretty=oneline --grep=enki\n     \n\n???\n",
      "answers": [
          {
              "text": "Shows the commit messages with 'enki'.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Shows the commits by author 'enki'.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Shows the commits in 'enki' repository.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "finding-commits",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Search for the commits made by \"enki\" or \"Joe\".\n\n    $ git log ???=\"???\\|Joe\"\n",
      "answers": [
          {
              "text": "`--author`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`enki`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`--pretty`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--name`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "finding-commits",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Search for the commits made by \"C Mustard\".\n\n    $ git ??? ???=\"C Mustard\"\n",
      "answers": [
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--author`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`--pretty`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`format`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--name`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "finding-commits",
      "author": "rosielowther",
      "category": "feature",
      "question": "What is the `~` equivalent of `^^^^`?\n\n???\n",
      "answers": [
          {
              "text": "~4",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "~3",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "~2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "```\n```\n",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "finding-commits",
      "author": "rosielowther",
      "category": "feature",
      "question": "The command:\n\n    $ git show 42ea31d^\n\nGets the ??? of commit `42ea31d`.\n",
      "answers": [
          {
              "text": "parent",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "grandparent",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "child",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "finding-commits",
      "author": "rosielowther",
      "category": "feature",
      "question": "how can you access the forth commit in this sequence?\n\nSay you've got the following commit tree:\n\n```bash\nA--B--C--D--E--HEAD.\n```\n\nWhich of the following refers to the commit labeled with D?\n\n ???\n",
      "answers": [
          {
              "text": "HEAD~~",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "HEAD^2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "HEAD^1",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "HEAD~1",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "finding-commits",
      "author": "rosielowther",
      "category": "feature",
      "question": "In order to see the commits that are on `awesomeFeature` branch but not on `master`, you have to run:\n\n    $ git ???\n          ??? ??? ???\n",
      "answers": [
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`master`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`..`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`awesomeFeature`",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "`.`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`test`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "finding-commits",
      "author": "rosielowther",
      "category": "feature",
      "question": "    $ git log origin/master..HEAD\n\nshows ??? that are on the ??? branch, but not on ??? .\n",
      "answers": [
          {
              "text": "commits",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "current",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "master",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "main",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "snippets",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "help",
      "author": "catalin",
      "category": "how to",
      "question": "Complete the command such that it will show you the *manpage* of `git branch` command:\n\n    $ ??? ???-???\n",
      "answers": [
          {
              "text": "`man`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`branch`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`help`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--help`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "help",
      "author": "catalin",
      "category": "how to",
      "question": "What flag can you use after a git command to show its documentation?\n\n    $ git clone ???\n",
      "answers": [
          {
              "text": "`--help`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--manpage`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`help`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--man`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--info`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "help",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What do these commands do?\n\n    $ git add enki.md games.md\n    $ git reset \n\n ???\n",
      "answers": [
          {
              "text": "Unstage `enki.md` and `games.md`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Unstage `games.md`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Delete `enki.md` and `games.md`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "help",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Undo the command that staged `index.html` :\n\n    $ git add index.html\n    $ git ??? HEAD index.html\n",
      "answers": [
          {
              "text": "`reset`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`remove`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`amend`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "help",
      "author": "catalin",
      "category": "how to",
      "question": "What flag is used to modify your last commit ?\n\n    $ git commit ???\n",
      "answers": [
          {
              "text": "`--amend`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--undo`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--update`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-a`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "help",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Create a `newBranch` that has the `ba23fe1` commit as the starting point:\n\n    $ git ??? ??? ba23fe1\n",
      "answers": [
          {
              "text": "`branch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`newBranch`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`temp`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`log`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`reflog`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`master`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "help",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Check the reflog :\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`reflog`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-g`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-l`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "help",
      "author": "mihaiberq",
      "category": "must-know",
      "question": "Undo the last commit in the current branch:\n\n    $ ??? ??? ???\n",
      "answers": [
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`revert`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`HEAD`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`index`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`commit`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`last`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`@{0}`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git-revert`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`reset`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git-reset`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "help",
      "author": "mihaiberq",
      "category": "must-know",
      "question": "What command is used to get rid of a commit by undoing the changes introduced by it?\n\n???\n",
      "answers": [
          {
              "text": "`git revert`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`git reset`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git checkout`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git restart`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git clean`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`git commit`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "logging",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Show the commits between 01/01/2016 and 05/01/2016 (DD/MM/YYYY) :\n\n    $ git ??? \n        --???=\"2016-01-01\" \n        --???=\"2016-01-05\"\n",
      "answers": [
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`after`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`before`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`start`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`end`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "logging",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Show the commits made today :\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--since=\"yesterday\"`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`--pretty`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--since`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`\"yesterday\"`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "logging",
      "author": "catalin",
      "category": "how to",
      "question": "Log 5 commits:\n\n    $ git ??? ??? ???\n",
      "answers": [
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-n`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`5`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`--stat`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--show`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--commits`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`all`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`just`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`show`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`status`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "logging",
      "author": "catalin",
      "category": "how to",
      "question": "What flag of `git log` would you use to show commits on one line?\n\n    $ git log ???\n",
      "answers": [
          {
              "text": "`--oneline`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`one`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-o`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--pretty`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-n`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "logging",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Print the output where `%ar` represents the time since the commit has been pushed:\n\n    $ git ??? ???:\n             \"??? - %ar\"\n    fe21ab0 - 1 week ago \n    cd4512a - 2 weeks ago \n",
      "answers": [
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--pretty=format`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`%h`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`--pretty`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`oneline`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "logging",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Print the log output on a single line:\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--pretty=oneline`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`--pretty`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`oneline`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`singleline`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "logging",
      "author": "rosielowther",
      "category": "feature",
      "question": "Searching for the changes made to *myFunction* can be done using:\n\n    $ git ??? ??? \n          :myFunction:myFile.js\n",
      "answers": [
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-L`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-l`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--log`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--1`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "logging",
      "author": "rosielowther",
      "category": "feature",
      "question": "The history of changes made to a function can be seen using the ??? option of `git log`.\n",
      "answers": [
          {
              "text": "`-L`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-l`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-history`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--L`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "logging",
      "author": "rosielowther",
      "category": "feature",
      "question": "To see a visual representation of the project’s branching, you would use:\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--graph`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-graph`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--log`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "merges",
      "author": "catalin",
      "category": "must-know",
      "question": "What flag can be used such that fast-forward merge is not used even if its possible?\n???\n",
      "answers": [
          {
              "text": "`--no-ff`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-n`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-n-ff`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`ff-n`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--twm`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "merges",
      "author": "catalin",
      "category": "must-know",
      "question": "    git rebase master\n\nrestores the current branch to the last ??? shared by the two branches, then ??? the changes made since then to master to the current branch.\n",
      "answers": [
          {
              "text": "commit",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "applies",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "checkout",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "deletes",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "merges",
      "author": "catalin",
      "category": "must-know",
      "question": "Complete the following snippet to achieve rebasing of the `scrollFix` branch:\n\n    #checkout to the branch ahead\n    $ git checkout scrollFix\n    $ ??? ??? master\n",
      "answers": [
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`rebase`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`rewind`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`redo`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`checkout`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "merges",
      "author": "rosielowther",
      "category": "feature",
      "question": "Practice: The command to enable the *Reuse Recorded Resolution* tool is:\n\n    $ ??? ??? ???\n      ???.??? ???\n",
      "answers": [
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`config`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`--global`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`rerere`",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "`enabled`",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "`true`",
              "correct": true,
              "correctIndex": 5
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "merges",
      "author": "rosielowther",
      "category": "feature",
      "question": "rerere(“Reuse Recorded Resolution”) ??? the way you ??? a ??? conflict and automatically resolves it for you.\n",
      "answers": [
          {
              "text": "saves",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "solved",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "merging",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "shares",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "pulling",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "merges",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Solve this merge conflict.\n\n    $ git ??? test\n    # merge failed\n\n    # open testing.js to resolve issues\n    console.log(a);\n\n    $ git ??? testing.js\n",
      "answers": [
          {
              "text": "`merge`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`add`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`rm`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`commit`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "merges",
      "author": "rosielowther",
      "category": "must-know",
      "question": "How do you mark a merge conflict as resolved?\n\n    $ git ???\n",
      "answers": [
          {
              "text": "`add`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`merge`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`rm`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`branch`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`commit`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "merges",
      "author": "rosielowther",
      "category": "best practice",
      "question": "How would you make git to recreate a history of commits if someone rebased shared commits?\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`pull`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--rebase`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`rebase`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`commit`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "merges",
      "author": "rosielowther",
      "category": "best practice",
      "question": "The best practice is to only `rebase` commits that exist in your ??? ???.\n",
      "answers": [
          {
              "text": "local",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "repository",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "remote",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-i",
      "author": "rosielowther",
      "category": "feature",
      "question": "Show that you intend to track `enki.md` :\n\n    $ git ??? ??? enki.md\n",
      "answers": [
          {
              "text": "`add`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-N`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-n`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`stage`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`track`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-i",
      "author": "rosielowther",
      "category": "feature",
      "question": "Which flag specifies the *intention* to add a file in the future?\n\n    $ git add ???\n",
      "answers": [
          {
              "text": "`-N`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-n`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-A`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-a`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-i",
      "author": "rosielowther",
      "category": "must-know",
      "question": "To stage `enki.md`, you would press\n\n    What now > 2\n           staged     unstaged path\n      1: unchanged    +0/-1 index.md\n      2: unchanged    +1/-1 enki.md\n    Update > ???\n           staged     unstaged path\n      1: unchanged    +0/-1 index.md\n    |*2: unchanged    +1/-1 enki.md\n",
      "answers": [
          {
              "text": "`2`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`enki.md`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`stage`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-i",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Open the interactive shell for staging files:\n\n    $ git add ???\n",
      "answers": [
          {
              "text": "`-i`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`i`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-shell`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-i",
      "author": "rosielowther",
      "category": "feature",
      "question": "Complete the following code snippet to partially stage a file:\n\n    $ ??? ??? ???\n",
      "answers": [
          {
              "text": "git",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "add",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "-p",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "-patch",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "stage",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-i",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What does this command do?\n\n    $ git reset --patch enki.md\n\n???\n",
      "answers": [
          {
              "text": "interactively removes changes made to `enki.md`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "restores `enki.md` to the last version",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "untracks enki.md",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-i",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Interactively unstage some of the changes made to `enki.md`.\n\n    $ git reset ??? ???\n",
      "answers": [
          {
              "text": "`--patch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`enki.md`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-patch`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-i",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What does this tell us about the file `enki.md`?\n\n    $ git status --short\n    M  enki.md\n     M hello.md\n\n???\n",
      "answers": [
          {
              "text": "`enki.md` is modified and staged",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`enki.md` is modified and not staged",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`enki.md` is a new untracked file",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`enki.md` is a new staged file",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-i",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What is the option to get a simplified status output?\n\n    $ git status ???\n",
      "answers": [
          {
              "text": "`-s`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--compact`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-v`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--long`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "You can test stashed code using a new branch “testing”:\n\n    $ git ??? ??? ???\n",
      "answers": [
          {
              "text": "`stash`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`branch`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`testing`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`-stash`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`new`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "    $ git stash branch newBranch\n\nApplies the ??? changes to a new ??? before merging them into the old one.\n",
      "answers": [
          {
              "text": "stashed",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "branch",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "commit",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "merged",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "Remove the untracked files in your current directory :\n\n    $ git ??? ???\n",
      "answers": [
          {
              "text": "`clean`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-f`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`rm`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`delete`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "Remove the untracked directories in your local repository :\n\n    $ git ??? -f ???\n",
      "answers": [
          {
              "text": "`clean`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-d`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`rm`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`delete`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "You can stash code more than once on the same branch. To see all the existing stashes you have to run:\n\n`$ ??? ??? ???`\n",
      "answers": [
          {
              "text": "`git`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`stash`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`list`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`pop`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`apply`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "`$ git stash ???`\n\n applies the last stash and removes it from the list.\n",
      "answers": [
          {
              "text": "`pop`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`apply`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`list`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-ii",
      "author": "rosielowther",
      "category": "how to",
      "question": "Untrack the directory `experiment` :\n\n    $ git ??? ??? ??? \n                      experiment\n",
      "answers": [
          {
              "text": "`rm`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--cached`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-r`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-t`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-ii",
      "author": "rosielowther",
      "category": "how to",
      "question": "What is the flag to remove a file from cache, but not from the working directory?\n\n    $ git rm ??? enki.html\n",
      "answers": [
          {
              "text": "`--cached`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-d`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-m`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--index`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "Select the `git stash` option that stashes:\n\ntracked and untracked files ???  \nunstaged files ???  \ninteractively ???  \n",
      "answers": [
          {
              "text": "-u",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "--keep-index",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "--patch",
              "correct": true,
              "correctIndex": 2
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "staging-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "`new feature` in `git stash save new feature` represents a ??? of the stash.\n",
      "answers": [
          {
              "text": "description",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "branch",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "message",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "tips",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Configure git to warn you about whitespaces\n\n    $ git ??? ??? \n        ???.??? ???\n",
      "answers": [
          {
              "text": "`config`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--global`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`core`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`whitespace`",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "`warn`",
              "correct": true,
              "correctIndex": 4
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "tips",
      "author": "rosielowther",
      "category": "must-know",
      "question": "    $ git config --global \n               core.whitespace warn\n\nWould ??? .\n",
      "answers": [
          {
              "text": "highlight the whitespace issues",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "automatically fix whitespace issues",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "tips",
      "author": "rosielowther",
      "category": "feature",
      "question": "Cache your credentials:\n\n    $ git ??? ???\n      ???.??? ???\n",
      "answers": [
          {
              "text": "`config`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--global`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`credential`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`helper`",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "`cache`",
              "correct": true,
              "correctIndex": 4
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "tips",
      "author": "rosielowther",
      "category": "feature",
      "question": "To cache your credentials for 15 minutes you would run:\n\n    $ git ??? ??? \n      credential.??? ???\n",
      "answers": [
          {
              "text": "`config`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--global`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`helper`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`cache`",
              "correct": true,
              "correctIndex": 3
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "tips",
      "author": "rosielowther",
      "category": "feature",
      "question": "Change the colour for `diff.meta` to be *blue* foreground, *black* background and *bold* font:\n\n    $ git ??? ???\n          ??? ???\n",
      "answers": [
          {
              "text": "`config`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--global`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`color.diff.meta`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`”blue black bold”`",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "`”blue, black, bold”`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "tips",
      "author": "rosielowther",
      "category": "feature",
      "question": "A customisable `color.` option is ??? .\n",
      "answers": [
          {
              "text": "interactive.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "git.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "sources.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "tips",
      "author": "rosielowther",
      "category": "how to",
      "question": "Enable `core.autocrlf` on Windows:\n\n    $ git ??? ???\n          ??? ???\n",
      "answers": [
          {
              "text": "`config`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--global`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`core.autocrlf`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`true`",
              "correct": true,
              "correctIndex": 3
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "tips",
      "author": "rosielowther",
      "category": "how to",
      "question": "To enable `core.autocrlf`, its value should be set to:\nWindows   ???  \nLinux/Mac   ???  \n",
      "answers": [
          {
              "text": "true",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "input",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "start",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "-true",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "tips",
      "author": "rosielowther",
      "category": "how to",
      "question": "Configure your key to be `0A45226A` then sign a commit with it :\n\n    $ git config --global ??? \n                         0A45226A\n\n    $ git add .\n\n    $ git commit ??? ???\n                   “commit signed”\n",
      "answers": [
          {
              "text": "`user.signingkey`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-S`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`-m`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`-s`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "tips",
      "author": "rosielowther",
      "category": "how to",
      "question": "    $ gpg --gen-key\n\nGenerates a ??? used to sign ??? .\n",
      "answers": [
          {
              "text": "key",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "commits",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "password",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "work-smart",
      "author": "rosielowther",
      "category": "feature",
      "question": "You can enable autocorrect using :\n\n    $ git config --global\n              ???.???\n",
      "answers": [
          {
              "text": "`help`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`autocorrect`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`git`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-ac`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "work-smart",
      "author": "rosielowther",
      "category": "must-know",
      "question": "The shorthand command to set up a new branch and track it is:\n\n    $ git ??? --??? \n              origin/sharefix\n",
      "answers": [
          {
              "text": "`checkout`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`track`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`follow`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`branch`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "work-smart",
      "author": "rosielowther",
      "category": "must-know",
      "question": "The shorthand command to set up a new branch and track it is:\n\n    $ git ??? --??? \n              origin/sharefix\n",
      "answers": [
          {
              "text": "`checkout`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`track`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`follow`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`branch`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "work-smart",
      "author": "rosielowther",
      "category": "hack",
      "question": "`@{u}` refers to ??? in the following snippet:\n\n    $ git checkout myBranch\n    $ git merge @{u}\n    #upstream equivalent of myBranch\n",
      "answers": [
          {
              "text": "origin/myBranch",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "myBranch",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "origin/master",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "work-smart",
      "author": "rosielowther",
      "category": "hack",
      "question": "`@{u}` is used to reference the \n\n???\n",
      "answers": [
          {
              "text": "upstream tracked branch",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "downstream tracked branch",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "master branch",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "work-smart",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Create an alias `pr` for the command:\n\n    $ git ??? ??? ???\n        'log --pretty=format:\"%h:%an'\n",
      "answers": [
          {
              "text": "`config`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`--global`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`alias.pr`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`alias`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`pr`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`log`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`pretty`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "work-smart",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Which command can now be used to create an annotated tag?\n\n    $ git config --global alias.ta 'tag -a'\n    $ git ???\n",
      "answers": [
          {
              "text": "`ta`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`alias.ta`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`tag`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`--global`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "work-smart",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Some of the commands that run just fine while `git` is offline are \n\n??? .\n",
      "answers": [
          {
              "text": "commit, log, checkout",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "commit, log, push",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "pull, push, status",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "work-smart",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Some of the commands that run just fine while `git` is offline are\n\n ??? .\n",
      "answers": [
          {
              "text": "commit, log, checkout",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "commit, log, push",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "pull, push, status",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "workflow",
      "author": "catalin",
      "category": "how to",
      "question": "Is the concept of **pull requests** only used in *GitHub*?\n\n???\n",
      "answers": [
          {
              "text": "`no`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`yes`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "workflow",
      "author": "catalin",
      "category": "must-know",
      "question": "GitHub is just ??? Git repositories.\n",
      "answers": [
          {
              "text": "`a hosting solution for`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`an alternative to`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`another name for`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`a newer implementation for`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "workflow",
      "author": "rosielowther",
      "category": "best practice",
      "question": "Squashing commits means \n\n??? .\n",
      "answers": [
          {
              "text": "combining them into one big commit",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "deleting them",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "commiting them",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "workflow",
      "author": "rosielowther",
      "category": "must-know",
      "question": "For complex projects, the best practice is to work on ??? .\n",
      "answers": [
          {
              "text": "auxiliary branches        ",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "master branch",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "a single other branch",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "workflow",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Create a new branch :\n\n    $ git ??? ??? newFeature\n",
      "answers": [
          {
              "text": "`checkout`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`-b`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`branch`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-d`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "git",
      "course": "workflow",
      "lesson": "workflow",
      "author": "rosielowther",
      "category": "must-know",
      "question": "A way of keeping the master branch clean and safely experimenting is by using ??? .\n",
      "answers": [
          {
              "text": "branches ",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "merges",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "IDEs",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "dummy-workout",
      "author": "pawel",
      "category": "hack",
      "question": "Add a class to the root `<html`>: \n\n```javascript\ndocument.???.??? = \"js\";\n```\n",
      "answers": [
          {
              "text": "documentElement",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "className",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "doc",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "class",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "documentClass",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "root",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "html",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "window",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "dummy-workout",
      "author": "pawel",
      "category": "hack",
      "question": "Add a class to the root `<html>`:\n\n```javascript\n???.???.className = \"myClass\";\n```\n",
      "answers": [
          {
              "text": "document",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "documentElement",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "root",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "html",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "parent",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "top",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "window",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "dummy-workout",
      "author": "catalin",
      "category": "feature",
      "question": "Check if the **DO NOT TRACK** is disabled:\n\n```javascript\nif (navigator.??? === ??? ) {\n  //handle\n}\n```\n",
      "answers": [
          {
              "text": "doNotTrack",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "0",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "1",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "dontTrack",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "trackStatus",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "unspecified",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "dummy-workout",
      "author": "catalin",
      "category": "tip",
      "question": "Complete the check to see if a user is connected to the internet:\n\n    if (???.???) {\n      //\n    }\n",
      "answers": [
          {
              "text": "navigator",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "onLine",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "nav",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "window",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "connected",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "dummy-workout",
      "author": "catalin",
      "category": "tip",
      "question": "Complete the check to see if a user is connected to the internet:\n\n    if (???.???) {\n      //\n    }\n",
      "answers": [
          {
              "text": "navigator",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "onLine",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "nav",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "window",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "connecte",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "dummy-workout",
      "author": "catalin",
      "category": "tip",
      "question": "Force loading an image means hard-coding the image source in the html attribute *src* or in the CSS file. Bearing this in mind, complete the following snippet of code:\n\n    < ??? ???='enki1.jpg' \n                        style='???:none' />\n",
      "answers": [
          {
              "text": "img",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "src",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "display",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "source",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "background-image",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "dummy-workout",
      "author": "catalin",
      "category": "tip",
      "question": "Flickering image bug in IE10 can be solved by ???\n",
      "answers": [
          {
              "text": "force loading the image",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "loading the image through a script",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "uninstalling IE10",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "dummy-workout",
      "author": "pawel",
      "category": "best practice",
      "question": "What happens when you visit a webpage that uses a script **with the same host** as a page previously visited?\n\n???\n",
      "answers": [
          {
              "text": "script is loaded from cache",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "script is downloaded",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "script is not loaded",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "dummy-workout",
      "author": "AlexYancey",
      "category": "feature",
      "question": "Complete the code snippet below to create the following element:\n\n```javascript\n// <a href='www.practiceyourJS.com'>JS</a>\n\n\"???\".???('www.practiceyourJS.com');\n```\n",
      "answers": [
          {
              "text": "JS",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "link",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "practiceyourJS",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "url",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "href",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "<a>",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "write",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "document",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "dummy-workout",
      "author": "AlexYancey",
      "category": "feature",
      "question": "Complete the snippet below to create the element commented:\n\n```javascript\n// <a href=\"http.enki.com\">Enki</a>\n\"Enki\".???(\"http.enki.com\");\n```\n",
      "answers": [
          {
              "text": "link",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "write",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "to",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "document",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "url",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "dummy-workout",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Save a piece of data to session storage.\n\n```javascript\nsessionStorage.???('???', 'info');\n```\n",
      "answers": [
          {
              "text": "setItem",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "itemName",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "set",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "newItem",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "allocItem",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "itemNum",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "session",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "dummy-workout",
      "author": "tommarshall",
      "category": "must-know",
      "question": "When will `sessionStorage` terminate?\n\n???\n",
      "answers": [
          {
              "text": "When tab is closed.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "When page is refreshed.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "When page is reloaded.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "When page is scrolled.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "measuring-performance",
      "author": "pawel",
      "category": "feature",
      "question": "Scripts with the ??? attribute are executed in order. Unlike ??? scripts, they will only execute when the entire document has been loaded.\n",
      "answers": [
          {
              "text": "defer",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "async",
              "correct": true,
              "correctIndex": 1
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "measuring-performance",
      "author": "pawel",
      "category": "feature",
      "question": "What type of script is executed as soon as it is downloaded, without blocking the browser in the meantime?\n\n???\n",
      "answers": [
          {
              "text": "`async`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`defer`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`all`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`none`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "measuring-performance",
      "author": "rosielowther",
      "category": "feature",
      "question": "Which method call of the High Resolution Time API returns the current time?\n\n???\n\nThe returned value by the method above is represented in ???, with ??? precision.\n\nThe measurement is ??? exact than the one accessible via `Date.now()`\n",
      "answers": [
          {
              "text": "performance.now()",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "milliseconds",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "microsecond",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "more",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "less",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "nanosecond",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "resolution.start()",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "highres.run()",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "resolution.time()",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "second",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "day",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "measuring-performance",
      "author": "rosielowther",
      "category": "feature",
      "question": "What is the correct call of the High Resolution Time API that returns the current time in milliseconds, with microseconds precision?\n\n???\n",
      "answers": [
          {
              "text": "performance.now()",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "resolution.start()",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "highres.run()",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "resolution.time()",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "measuring-performance",
      "author": "rosielowther",
      "category": "feature",
      "question": "The navigation API shows how a user navigated on a particular page. What are the missing values for the following type properties? \n\n0 : ???\n1 : ???\n2 : ???\n255 : Other.\n",
      "answers": [
          {
              "text": "URL or link.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Refreshed page.",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "History.",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "New page.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Invalid link.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Bookmarked page.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "measuring-performance",
      "author": "rosielowther",
      "category": "feature",
      "question": "Navigation API stores events as a propriety of which object?\n\n???\n",
      "answers": [
          {
              "text": "`window.performance.timing`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`window.timing`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`timing.loadEventEnd`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`timing.navigationStart`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`window.performance.navigation`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "measuring-performance",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Which following property of `ProgressEvent` shows the amount of work already done by the underlying process? \n\n???\n",
      "answers": [
          {
              "text": "`ProgressEvent.loaded;`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`ProgressEvent.lengthComputable;`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`ProgressEvent.total;`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "measuring-performance",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Which following property of `ProgressEvent` returns a boolean?\n\n1) `ProgressEvent.loaded`\n\n2) `ProgressEvent.lengthComputable`\n\n3) `ProgressEvent.total`\n\n???\n",
      "answers": [
          {
              "text": "`2`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`1`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`3`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "measuring-performance",
      "author": "rosielowther",
      "category": "feature",
      "question": "Fill the gap to compute the `duration` between `start` and `end` marks:\n\n```javascript\nperformance.???(\"???\", \n    \"start\", \"end\");\n```\n",
      "answers": [
          {
              "text": "`measure`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`duration`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`time`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`elapsed`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`timing`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "measuring-performance",
      "author": "rosielowther",
      "category": "feature",
      "question": "Fill the gap to compute the `duration` between `start` and `end` marks:\n\n```javascript\nperformance.???(\"???\", \n    \"start\", \"end\");\n```\n",
      "answers": [
          {
              "text": "`measure`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`duration`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`time`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`elapsed`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`timing`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "navigation",
      "author": "pawel",
      "category": "how to",
      "question": "Construct the full URL path by completing the JS code snippet below: \n\n```javascript\nvar newURL = ???+ \n    \"//\" + ??? + \"/\"\n         + ???;\n```\n",
      "answers": [
          {
              "text": "`window.location.protocol`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`window.location.host`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`window.location.pathname`",
              "correct": true,
              "correctIndex": 2
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "navigation",
      "author": "pawel",
      "category": "how to",
      "question": "Consider the following url:\n\n    http://example.com/data/index.html\n\nGet the host of the url:\n\n```javascript\nwindow.???.???;\n```\n",
      "answers": [
          {
              "text": "`location`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`host`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`navigator`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`history`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`url`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`protocol`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`pathname`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "navigation",
      "author": "rosielowther",
      "category": "feature",
      "question": "What are the three parameters required with the `pushState` method (in order) when modifying a website's URL? \n\n```javascript\nhistory.pushState([???], \n       [???],[???])\n```\n",
      "answers": [
          {
              "text": "`data`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`title`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`url`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`info`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`string`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`copy`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`link`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`head`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`body`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "navigation",
      "author": "rosielowther",
      "category": "feature",
      "question": "What method is used to modify a website URL without a full page refresh?\n\n```javascript\nhistory.???([data], \n            [title], [url]);\n```\n",
      "answers": [
          {
              "text": "`pushState`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`modURL`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`changeRoute`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`push`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "navigation",
      "author": "rosielowther",
      "category": "feature",
      "question": "Move forwards once using the `History API`:\n\n```javascript\nwindow.???.???();\n```\n",
      "answers": [
          {
              "text": "`history`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`forward`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`navigation`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`previous`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`next`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`length`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "navigation",
      "author": "rosielowther",
      "category": "feature",
      "question": "Move backwards once using the `History API`:\n\n```javascript\nwindow.???.???();\n```\n",
      "answers": [
          {
              "text": "`history`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`back`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`forward`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`go`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`navigation`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`length`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "navigation",
      "author": "pawel",
      "category": "tip",
      "question": "Assuming that the current window has no parent, what would the following check return? ???\n\n```javascript\nwindow === window.top\n```\n",
      "answers": [
          {
              "text": "True",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "False",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Error",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Undefined",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "navigation",
      "author": "pawel",
      "category": "tip",
      "question": "Assume current window has no parent. What will the output of the following check be?\n\n```javascript\nwindow === window.top // ???\n```\n",
      "answers": [
          {
              "text": "`true`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`false`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`error`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "navigation",
      "author": "catalin",
      "category": "feature",
      "question": "What is the name of the event fired when a user leaves the webpage?\n\n???\n\nWhat is the name of the event listener triggered before a user leaves the webpage?\n\n???\n",
      "answers": [
          {
              "text": "beforeunload",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "onbeforeunload",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "onback",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "back",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "exit",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "leave",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "onback",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "onexit",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "onleave",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "navigation",
      "author": "catalin",
      "category": "feature",
      "question": "Fill the missing event listener such that it will be automatically triggered when the user leaves the page:\n\n```javascript\n???.??? = function() {\n  alert(\"Your work will be lost.\");\n};\n```\n",
      "answers": [
          {
              "text": "window",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "onbeforeunload",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "beforeunload",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "ifbackpressed",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "dom",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "global",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "events",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "reading-writing",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Use the blob constructor to create a blob: \n\n```javascript\nvar debug = {hello: \"Enki\"};\n\nvar blob = new ???([\n    JSON.???(debug, null, 2)],\n    {type : 'application/json'});\n```\n",
      "answers": [
          {
              "text": "`Blob`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`stringify`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`Instance`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`slice`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`start`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`config`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`Class`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "reading-writing",
      "author": "tommarshall",
      "category": "must-know",
      "question": "What method should be used to create a subset of a blob?\n\n```javascript\nvar blob = instanceOfBlob.???([\n start, [, end [, contentType]]\n]);\n```\n",
      "answers": [
          {
              "text": "`slice`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`subset`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`splice`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`concat`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`stringify`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "reading-writing",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Complete the following code snippet such that the `file` object is read as an array buffer?\n\n```javascript\nvar reader = new ???();\nreader.???(file);\n```\n",
      "answers": [
          {
              "text": "FileReader",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "readAsArrayBuffer",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "fReader",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "file-reader",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "read",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "interpret",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "readAsArray",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "reading-writing",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Which method of the `FileReader` class can be used to read data as an array buffer?\n\n```javascript\nconst reader = new FileReader()\nreader.???()\n```\n",
      "answers": [
          {
              "text": "readAsArrayBuffer",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "readAsBuffer",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "readTypedArray",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "readArray",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "readBuffer",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "reading-writing",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Which FileReader's function is called after `readAsDataURL()` is completed?\n\n???\n",
      "answers": [
          {
              "text": "`onload`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`onend`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`oncomplete`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`readAsDataURL`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "reading-writing",
      "author": "tommarshall",
      "category": "must-know",
      "question": "The URL returned by the `readAsDataURL` function is\n\n???\n",
      "answers": [
          {
              "text": "a base64 encoded string",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "an SVG's code",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "a link to file's location",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "reading-writing",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Read from a text file:\n\n    reader.onload = function(e) {\n       var text = reader.???;\n    }\n    reader.readAsText(file, ???);\n",
      "answers": [
          {
              "text": "`result`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`encoding`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`reader`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`file`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`readAsText`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`readFile`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`openFile`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`onload`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "reading-writing",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Read from a text file:\n\n    var reader = new FileReader();\n    reader.onload = function(e) {\n      var text = reader.result;\n    }\n\n    ???.???(file,encoding);\n",
      "answers": [
          {
              "text": "`reader`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`readAsText`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`onload`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`read`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`readText`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`readFile`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`file`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "reading-writing",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Retrieve the data from local storage:\n\n```javascript\nvar localData = ???\n               .???(\"data\");\n```\n",
      "answers": [
          {
              "text": "`localStorage`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`getItem`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`local`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`storage`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`localStore`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`Window.localStorage`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`get`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`item`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "reading-writing",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Create a `localStorage` item with key `awesome` and value `enki`:\n\n```javascript\n???.???('awesome', 'enki');\n```\n",
      "answers": [
          {
              "text": "`localStorage`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`setItem`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`createItem`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`removeItem`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`clear`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`getItem`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`newItem`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-i",
      "author": "rosielowther",
      "category": "feature",
      "question": "The async `getBattery` method of the Battery API returns a `battery` object. Fill in the gaps in the following snippet such that you log each level change in the device's battery via an event listener:\n\n```javascript\nnavigator.???()\n  .then((battery) => {\n    ???.???(\n      ???, () => {\n        console.log(battery.level * 100)\n      }\n    )\n  })\n```\n",
      "answers": [
          {
              "text": "getBattery",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "battery",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "addEventListener",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "'levelChange'",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "logBatteryLevel",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "addListener",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "bat",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "'level'",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "'change'",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "BatteryAPI",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-i",
      "author": "rosielowther",
      "category": "feature",
      "question": "Using the battery API, fill in the missing gaps of the following code snippet such that the battery level is outputed properly:\n\n```javascript\n???.???\n  .then((battery) => {\n    console.log(battery.level)\n  })\n```\n",
      "answers": [
          {
              "text": "navigator",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "getBattery",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "then",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "battery",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "batteryApi",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "now",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "run",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "start",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-i",
      "author": "tommarshall",
      "category": "feature",
      "question": "Fill in the gaps in the following code snippet. Using the geolocation API exposed by the browser and assuming you have all the permissions needed, get the current device position and log the latitude and longitude.\n\n```javascript\nnavigator.???.???(\n  function(pos) {\n    const lat = pos.???.???,\n    const long = ???.???\n    console.log(lat, long)\n  }\n)\n```\n",
      "answers": [
          {
              "text": "geolocation",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "getCurrentPosition",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "coordinate",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "latitude",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "pos.coordinate",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "longitude",
              "correct": true,
              "correctIndex": 5
          },
          {
              "text": "pos.latitude",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "pos.longitude",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "geoLocation",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "getPosition",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "coord",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "watchPosition",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "getLocation",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-i",
      "author": "tommarshall",
      "category": "feature",
      "question": "Fill in the missing bits of the following snippet such that, using the Geolocation API, you listen on the position changes of the device:\n\n```javascript\nnavigator.???.???(\n  function (pos) {\n    console.log('new position', pos)\n})\n```\n",
      "answers": [
          {
              "text": "geolocation",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "watchPosition",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "device",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "permission",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "position",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "detect",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "watch",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "listen",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "onChange",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-i",
      "author": "rosielowther",
      "category": "feature",
      "question": "Fill in the following code snippet such that it will send the user a notification with the text \"Hello from Enki\" only if the permissions are already granted:\n\n```javascript\nif (???.??? === ???)\n{\n  ???(???)\n}\n```\n",
      "answers": [
          {
              "text": "Notification",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "permissions",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "\"granted\"",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "new Notification",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "\"Hello from Enki\"",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "Notif",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "true",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "access",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "throw Notification",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "return Notification",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "return Notif",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "new Notif",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "throw Notif",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-i",
      "author": "rosielowther",
      "category": "feature",
      "question": "Which method exposed by the Notifications API can be used to ask for user permissions with regard to sending notifications?\n\n```javascript\n???.???()\n```\n",
      "answers": [
          {
              "text": "Notification",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "requestPermission",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "request",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "permission",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "requestAccess",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "access",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "grantAccess",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Notif",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-i",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Which of the following is not a visibleState property value? ???\n",
      "answers": [
          {
              "text": "rawview",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "hidden",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "visible",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "prerender",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "unloaded",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-i",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Complete the following JS code snippet to add an event listener for a visibility change:\n\n```javascript\ndocument.???(\"???\", function() {\n```\n",
      "answers": [
          {
              "text": "`addEventListener`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`visibilitychange`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`newEventListener`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`newListener`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`change`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`detectvisibility`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-i",
      "author": "rosielowther",
      "category": "feature",
      "question": "Fill in the gaps to make the device vibrate for two seconds, pause for a second, then vibrate for three more seconds:\n\n```javascript\n???.???([2000, 1000,\n  ???]);\n```\n",
      "answers": [
          {
              "text": "`navigator`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`vibrate`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`3000`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`3`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`300`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`device`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`object`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`start`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`vibration`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-i",
      "author": "rosielowther",
      "category": "feature",
      "question": "Using the Vibration API, make the device vibrate for half a second:\n\n```javascript\nnavigator.???(???);\n```\n",
      "answers": [
          {
              "text": "`vibrate`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`500`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`0.5`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`5000`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`start`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`vibration`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "How can you view an element in fullscreen with the **HTML Fullscreen API** ?\n\n???\n",
      "answers": [
          {
              "text": "`requestFullscreen()`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`viewFullScreen()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`viewScreen()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`applyFullscreen()`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "How can you view an element in fullscreen with the **HTML Fullscreen API** ?\n\n???\n",
      "answers": [
          {
              "text": "`requestFullscreen()`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`requestFullScreen()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`fullScreen()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`viewScreen()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`applyFullscreen()`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-ii",
      "author": "daniel_adelberg",
      "category": "tip",
      "question": "Create a 2d blue rectangle using `Canvas`:\n\n```javascript\nvar canvas = \n    document.getElementById(\"canvas\");\n// get the 2d context to draw in 2d\nvar context = canvas.getContext(\"2d\");\n\n// color and draw\n???.fillStyle = \"???\";\ncontext.???(20,20,100,200)\n```\n",
      "answers": [
          {
              "text": "`context`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`blue`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`fillRect`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`canvas`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`rectangle`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`drawRectangle`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`document`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-ii",
      "author": "daniel_adelberg",
      "category": "tip",
      "question": "Create a 2d blue rectangle using `Canvas`:\n\n```javascript\nvar canvas = \n    document.getElementById(\"canvas\");\n// get the 2d context to draw in 2d\nvar context = canvas.getContext(\"2d\");\n\n// color and draw\n???.fillStyle = \"???\";\ncontext.???(20,20,100,200)\n```\n",
      "answers": [
          {
              "text": "`context`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`blue`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`fillRect`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`canvas`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`rectangle`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`drawRectangle`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`document`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-ii",
      "author": "tommarshall",
      "category": "must-know",
      "question": "What is the compulsory argument the `fetch()` takes? ???\n",
      "answers": [
          {
              "text": "The path to the resource you want to fetch.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "The network name.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "An int value stating the number of files to fetch.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-ii",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Which interface for fetching resources is more powerful?\n\n???\n",
      "answers": [
          {
              "text": "`fetch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`XMLHttpRequest`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-ii",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Declare the connection and type:\n\n```javascript\nvar connection = ???.connection ||\n                 navigator.??? ||\n                 navigator.???;\nvar type = connection.type;\n```\n",
      "answers": [
          {
              "text": "`navigator`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`mozConnection`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`webkitConnection`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`connection`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`apiConnection`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`statusConnection`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`eventConnection`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-ii",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Listen for a change in the user connection:\n\n```javascript\n// assume connection is initialised\nconnection.addEventListener('???',\n  handlingFunction);\n```\n",
      "answers": [
          {
              "text": "`typechange`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`type`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`change`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`update`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`statusChange`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "How do you check the status of a permission? ???\n",
      "answers": [
          {
              "text": "`permissions.query();`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`permissions.status();`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`permissions.log();`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`permission.status();`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`permission.log();`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`permission.query();`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "toolbox-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "To what browser is the Permission API currently limited to?\n???\n",
      "answers": [
          {
              "text": "Chrome",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Safari",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Mozilla",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Internet Explorer",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "user-interaction",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Set the elements attribute so it's allowed to be dragged and at the start of the \"drag\" event, the `handler_function` would be triggered.\n\n```html\n<div ???=\"true\"\n   ???=\"handler_function(event);\">\nThis is draggable\n</div>\n```\n",
      "answers": [
          {
              "text": "`draggable`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`ondragstart`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`dragstart`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`dragging`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`drag`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`todrag`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`startdrag`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "user-interaction",
      "author": "tommarshall",
      "category": "must-know",
      "question": "What global event handler must be added to an element so that it can be dragged and dropped?\n\n???\n",
      "answers": [
          {
              "text": "`ondragstart`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`draggable`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`dragstart_handler`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`dataTransfer`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`dragAndDrop`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "user-interaction",
      "author": "catalin",
      "category": "tip",
      "question": "Add a listener to a `double click` event:\n\n```javascript\nmyVar.???('???', myDoubleClickFunction);\n```\n",
      "answers": [
          {
              "text": "`addEventListener`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`dblclick`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`addListener`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`eventListener`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`double-click`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`double_click`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`doubleclick`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "user-interaction",
      "author": "catalin",
      "category": "tip",
      "question": "Add a listener to a `click` event:\n\n```javascript\nmyVar.???(???,\n  myCLickFunction);\n```\n",
      "answers": [
          {
              "text": "`addEventListener`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`click`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`dblclick`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`addClickListener`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`false`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`contextmenu`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "user-interaction",
      "author": "ioanna.ki",
      "category": "how to",
      "question": "Prompt the user with a message and input option:\n\n```javascript\n???(???, default);\n```\n",
      "answers": [
          {
              "text": "`prompt`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`text`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`alert`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`confirm`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "user-interaction",
      "author": "ioanna.ki",
      "category": "how to",
      "question": "Prompt the user with a message and input option:\n\n```javascript\n???(???, default);\n```\n",
      "answers": [
          {
              "text": "`prompt`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`text`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`alert`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`confirm`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "user-interaction",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Get and return the MediaStream object using the promise below: \n\n```javascript\nvar p = navigator.???.???({\n   audio: true,\n   video: true\n});\n```\n",
      "answers": [
          {
              "text": "`mediaDevices`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`getUserMedia`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`mediaStream`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`navigator`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`promise`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`permission`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "browser-apis",
      "lesson": "user-interaction",
      "author": "tommarshall",
      "category": "must-know",
      "question": "If permission is provided, what is the\npromise returned and resolved with? ???\n",
      "answers": [
          {
              "text": "The MediaStream object.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "A permission object.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "A promise object.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Constraints for the media device.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "array-methods",
      "author": "Dral",
      "category": "must-know",
      "question": "Map the following array to return the square of each element:\n\n```javascript\nvar arr = [1,2,3,4,'map'].map(x => ???);\n// the result will be [1,4,9,16,???]\n```\n",
      "answers": [
          {
              "text": "x*x",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "NaN",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "x^2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "null",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "x+x",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "array-methods",
      "author": "Dral",
      "category": "must-know",
      "question": "You have to modify the elements of an array after a single,certain rule. The best way to do it is using ??? .\n",
      "answers": [
          {
              "text": "map()",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "filter()",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "splice()",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "array-methods",
      "author": "Dral",
      "category": "best practice",
      "question": "Complete the following snippet:\n\n```javascript\nvar numbers = [0,1,2,3,4,5,6,7];\n// div3 contains all numbers\n// divisible with 3\nvar div3 = numbers.???( num =>\n  num%3 ???);\n```\n",
      "answers": [
          {
              "text": "filter",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "== 0",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "!= 0",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "get",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "array-methods",
      "author": "Dral",
      "category": "best practice",
      "question": "`.filter`  can be used instead of ??? .\n",
      "answers": [
          {
              "text": "for and if",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "if",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "for and alert",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "array-methods",
      "author": "AlexYancey",
      "category": "how to",
      "question": "If you have an array:\n\n    var fruits =[oranges, apples, banana];\n\n\n    How would you select a fruit at random\n    from the array fruits?\n\n    var index =\n    Math.???(Math.random()*\n        fruits.length);\n\n    console.log(\"the random fruit is\"\n      +fruits[index]);\n",
      "answers": [
          {
              "text": "floor",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "ceil",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "wall",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "array-methods",
      "author": "AlexYancey",
      "category": "how to",
      "question": "If you have an array:\n\n    var fruits =[oranges, apples, banana];\n\n\n    How would you select a fruit at random\n    from the array fruits?\n\n    var index =\n    Math.???(Math.random()*\n       fruits.length);\n\n    console.log(\"the random fruit is\"\n      +fruits[index]);\n",
      "answers": [
          {
              "text": "floor",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "ceil",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "wall",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "array-methods",
      "author": "catalin",
      "category": "hack",
      "question": "Suppose:\n\n```javascript\nvar array1 = ['a', 'b', 'c'];\nvar array2 = ['d', 'e', 'f'];\n```\n\nMerge the two arrays in order:\n\n```javascript\n???.prototype.???\n.???(arrray1, arrray2);\n```\n",
      "answers": [
          {
              "text": "Array",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "push",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "apply",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "merge",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "arrayList",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "on",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "after",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "concat",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "array-methods",
      "author": "catalin",
      "category": "hack",
      "question": "What is the output of the following snippet?\n\n```javascript\nvar a = [3, 1, 4]\nvar b = [2, 7, 1]\nconsole.log(a + b)\n```\n\n???\n",
      "answers": [
          {
              "text": "3,1,42,7,1",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "[3, 1, 4, 2, 7, 1]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[[3, 1, 4], [2, 7, 1]]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "3, 1, 4, 2, 7, 1",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "array-methods",
      "author": "catalin",
      "category": "hack",
      "question": "what is the result of the following addition?\n\n```javascript\nconsole.log([3, 14] + [2, 71])\n```\n\n???\n",
      "answers": [
          {
              "text": "3,142,71",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "3,14,2,71",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[3,14,2,71]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[5, 85]",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "array-methods",
      "author": "Bruno",
      "category": "hack",
      "question": "Complete the code such that it will shuffle an array using `sort` and `random`.\n\n```javascript\nvar arr = [3, 1, 4, 2, 7, 1]\narr.???(???() {\n  return ???.???() - 0.5\n});\n\n// arr = [4, 2, 7, 1, 1, 3]\n```\n",
      "answers": [
          {
              "text": "sort",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "function",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "Math",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "random",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "shuffle",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "() =>",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "arr",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "merge",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "prototype",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Array",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "call",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "apply",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "+=",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "-0.5",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "array-methods",
      "author": "Bruno",
      "category": "hack",
      "question": "The following code will ???\n\n```javascript\nvar arr = [1,2,3,4,5,6,7];\narr.sort(function(){\n  return Math.random() - 0.5;\n});\n```\n",
      "answers": [
          {
              "text": "shuffle the array",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "sort the array decreasingly",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "do nothing to the array",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "arrays",
      "author": "Bruno",
      "category": "tip",
      "question": "Complete the code snippet:\n\n```javascript\nvar s = [1,2];\ns.??? ; // s = [1,2,3]\ns.??? ; // s = [1,2,3,4]\ns.??? ; // s = [1,2,3]\n```\n",
      "answers": [
          {
              "text": "push(3)",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "push(4)",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "pop()",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "pop(4)",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "pop(3)",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "arrays",
      "author": "Bruno",
      "category": "tip",
      "question": "Complete the code snippet:\n\n```javascript\nvar s = [1,2];\ns.??? ; // s = [1]\ns.??? ; // s = [1,2]\ns.??? ; // s = [1,2,4]\n```\n",
      "answers": [
          {
              "text": "pop()",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "push(2)",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "push(4)",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "pop(2)",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "pop(4)",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "arrays",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "How would you get the last value in the `myArray` array?\n\n    var myLength = myArray.???\n    var last = ???[??? ???];\n",
      "answers": [
          {
              "text": "`length`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`myArray`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`myLength`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`-1`",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "`+0`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`+1`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`array`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`[0]`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`.getLast`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`.tail`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "arrays",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Fill the gaps such that you get the first element of `enkiArray`:\n\n    var enkiArray = [1, 2, 3];\n    var firstElement = ??????;\n",
      "answers": [
          {
              "text": "`enkiArray`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`[0]`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`[1]`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`array`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`getLast()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`getFirst()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`push`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`pop`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "arrays",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "what is the length of the array below?\n\n```javascript\nlet arr = [,,,]\nconsole.log(arr.length)\n```\n\n ???\n",
      "answers": [
          {
              "text": "3",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "4",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "0",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "1",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "arrays",
      "author": "pawel",
      "category": "hack",
      "question": "Complete the following snippet:\n\n```javascript\nvar arr = [1,2,3];\narr.??? = 2; // arr = [1,2]\narr.length = 4; //arr = ???\n```\n",
      "answers": [
          {
              "text": "length",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "[1,2,undefined,undefined]",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "size",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[1,2,undefined,undefined,undefined]",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "arrays",
      "author": "pawel",
      "category": "hack",
      "question": "Complete the following snippet:\n\n```javascript\nvar names = [\"John\",\"Mary\",\"Tom\"];\nnames.length = 4;\n// names = ???\nnames.length = 0;\n// names = ???\n```\n",
      "answers": [
          {
              "text": "[\"John\",\"Mary\",\"Tom\", undefined]",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "[ ]",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "[undefined,undefined,undefined, undefined]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[\"John\",\"Mary\",\"Tom\"]",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "arrays",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Remove the `4th` and `5th` elements from the array:\n\n    myArray.???(3, ???)\n",
      "answers": [
          {
              "text": "`splice`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`2`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`slice`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`remove`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`3`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`4`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`5`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`6`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`delete`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "arrays",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "How would you remove the first element in the array using `splice`?\n\n    myArray.???(???, ???);\n",
      "answers": [
          {
              "text": "`splice`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`0`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`1`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`2`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`remove`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`slice`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async",
      "author": "rosielowther",
      "category": "must-know",
      "question": "In ES7, it'll be possible to use the ??? keyword to create an async function. The ??? keyword works similarly to yield.\n",
      "answers": [
          {
              "text": "async",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "await",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "return",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "throw",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "adjust",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "apply",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "generator",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What keyword is specific to **ES7 Async**?\n\n???\n",
      "answers": [
          {
              "text": "await",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "yield",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "return",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "throw",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async",
      "author": "rosielowther",
      "category": "feature",
      "question": "Which two functions are used to place a value onto a channel and to take a value from a channel? ???\n",
      "answers": [
          {
              "text": "`.put()` and `.take()`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`.add()` and `.remove()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`.add()` and `.take()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`.put()` and `.remove()`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async",
      "author": "rosielowther",
      "category": "feature",
      "question": "What does a **CSP Channel** use to handle the flow of data?\n\n???\n",
      "answers": [
          {
              "text": "Promises",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Generators",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`put()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`take()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "nothing",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async",
      "author": "rosielowther",
      "category": "feature",
      "question": "CSP (Communicating Sequential Processes) is a method for ??? processes to ??? during processing.\n",
      "answers": [
          {
              "text": "concurrent",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "communicate",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "synchronous",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "sequential",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "asynchronous",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "fail",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "make system calls",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async",
      "author": "rosielowther",
      "category": "feature",
      "question": "Create a new csp channel:\n\n```javascript\nvar ch = ???.???();\n```\n",
      "answers": [
          {
              "text": "`csp`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`chan()`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`channel()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`new`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`generate()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`putAsync()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`takeAsync()`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async",
      "author": "rosielowther",
      "category": "feature",
      "question": "Complete the following JS code snippet where co is used to yield a promise: \n\n```javascript\n???(function *() {\n   var result = ??? Promise.resolve(true);\n}).catch(onerror);\n```\n",
      "answers": [
          {
              "text": "`co`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`yield`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`run`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`do`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`const`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`argv`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`env`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async",
      "author": "rosielowther",
      "category": "feature",
      "question": "Can **generator function** be `yield`ed by `co()`?\n\n???\n",
      "answers": [
          {
              "text": "`yes`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`no`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async",
      "author": "rosielowther",
      "category": "must-know",
      "question": "JavaScript is ??? and therefore has ??? behaviour, this means that once the code in a function starts executing it has to finish before any code can run.\n",
      "answers": [
          {
              "text": "single-threaded",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "run-to-completion",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "double-threaded",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "not threaded",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "run-to-crash",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "run-to-memoryfull",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What's the notion describing two or more tasks executed in the same period, but not necessarily in parallel?\n\n???\n",
      "answers": [
          {
              "text": "`concurrency`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`parallelism`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`asynchronous`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`race condition`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async-tips",
      "author": "rosielowther",
      "category": "feature",
      "question": "Fill in the missing gaps in the following function definition such that it can be used as an **error-first** callback function:\n\n```javascript\nfunction myCallback(error, result) {\n  if (???) {\n    console.log('error', error)\n  }\n  console.log('result', ???)\n}\n```\n",
      "answers": [
          {
              "text": "error",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "result",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "err",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "return",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "this",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Error",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "throw new Error(error)",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async-tips",
      "author": "rosielowther",
      "category": "feature",
      "question": "Which statement is true about *error-first callbacks*:\n\n???\n",
      "answers": [
          {
              "text": "First argument of the callback function is an error.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "First argument of the main function is an error",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Errors are checked before the actual call",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async-tips",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What can **Promises** do compared to callbacks?\n\n???\n",
      "answers": [
          {
              "text": "un-invert the control",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "enforce control",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "call your callback earlier",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "call your callback more frequently",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async-tips",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Consider the following scenario:\n\nYou are relying on a third-party asynchronous function named `computeData` which you are calling at some point in your application. After this function finishes computing, you want to log the computed data and the time it took to compute. To achieve this, you can pass to `computeData` a second argument which should be a callback function.\n\n```javascript\nfunction logData(data, time) {\n  console.log('computed data:')\n  console.log(data)\n  console.log('time taken:')\n  console.log(time)\n}\n\ncomputeData(myData, logData)\n```\n\nWhat could happen is that the `computeData` function may forget to your call your `logData` function provided. One other potential problem is that `computeData` may call `logData` without passing the `time` argument. These are some examples of some consequences of a more general problem in async callback programming.\n\nWhat is the name of this dynamic?\n\n???\n",
      "answers": [
          {
              "text": "inversion of control",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "inversion of flow",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "un-inversion of control",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "callback hell",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "callback trust",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async-tips",
      "author": "Bruno",
      "category": "best practice",
      "question": "Which of the following statements about naming your callback functions do you consider false?\n\n???\n",
      "answers": [
          {
              "text": "they can minimise the memory used by your application",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "they make your code more readable",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "they can help you avoid callback hell",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "they can make your code more intuitive",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async-tips",
      "author": "Bruno",
      "category": "best practice",
      "question": "Which of the following pieces of code is the better piece of code, in terms of readabilty?\n\n???\n\n```javascript\n// Option 1\nsetTimeout(function() {\n   console.log('Hey!');\n   setTimeout(function() {\n      console.log('Hey, again!');\n   }, 1500);\n}, 1500);\n\n// Option 2\nfunction Hey() {\n  console.log('Hey!');\n  setTimeout(Hey_again, 1000);\n}\nfunction Hey_again() {\n  console.log('Hey, again!');\n}\nsetTimeout(Hey, 1000);\n```\n",
      "answers": [
          {
              "text": "Option 2",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Option 1",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async-tips",
      "author": "Dral",
      "category": "how to",
      "question": "Create the following promise to represent an error:\n\n```javascript\nreturn Promise.???(\n  new ???('Boo! :o')\n)\n```\n",
      "answers": [
          {
              "text": "`reject`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`Error`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`error`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`create`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`exception`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async-tips",
      "author": "Dral",
      "category": "how to",
      "question": "Complete the shortcut notation for **Promises** in **ES6**:\n\n```javascript\nreturn ???.???('my value');\n```\n",
      "answers": [
          {
              "text": "`Promise`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`resolve`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`reject`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`new`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`send`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`return`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`prom`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async-tips",
      "author": "Dral",
      "category": "how to",
      "question": "In what order will these console.log() statements occur?\n\nIn what order will these `console.log()` statements occur?\n\n```javascript\nconst element = document.body;\n\nelement.addEventListener('click', () => {\n  Promise.resolve().then(() => console.log('Microtask 1'));\n  console.log('Listener 1')\n})\n\nelement.addEventListener('click', () => {\n  Promise.resolve().then(() => console.log('Microtask 2'));\n  console.log('Listener 2')\n})\n```\n\n ???\n",
      "answers": [
          {
              "text": "Listener 1; Microtask 1; Listener 2; Microtask 2;",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Listener 1; Listener 2; Microtask 1; Microtask 2;",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Microtask 1; Listener 1; Microtask 2; Listener 2;",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Microtask 2; Listener 2; Microtask 1; Listener 1;",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async-tips",
      "author": "WebReflection",
      "category": "must-know",
      "question": "How to prevent the `shutdown` to happen?\n\n    let task = setTimeout(shutdown, 5000);\n    if (confirm('cancel shutdown?')) {\n      ???\n    }\n",
      "answers": [
          {
              "text": "`clearTimeout(task)`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`task = null;`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`delete task;`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "async-tips",
      "author": "WebReflection",
      "category": "must-know",
      "question": "What log is shown each second?\n\n    let t = setInterval(\n      (a, b) => {\n        ++a;\n        console.log(a + b);\n        // ???\n      },\n      1000, // delay\n      0,    // a\n      10    // b\n    );\n",
      "answers": [
          {
              "text": "`always 11`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`10 then 11 then 12`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`NaN`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`11 then 12 then 13`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "Kirill",
      "category": "how to",
      "question": "Complete the code to check if the argument is a number:\n\n```javascript\nfunction isNumber(x) {\n   var float = !isNan(???(x));\n   var finite = ???(x);\n   return float ??? ???;\n}\n```\n",
      "answers": [
          {
              "text": "parseFloat",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "isFinite",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "&&",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "finite",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "isInfinte",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "++",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "&",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "+",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "parse",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "'null'",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "typeof",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "var",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "Kirill",
      "category": "how to",
      "question": "Complete the code in order to check if the input is a number or not:\n\n```javascript\nfunction isNumber(n){\n  var float  = ! ???(???(n));\n  var finite = ???(n);\n  return float && finite;\n}\n```\n",
      "answers": [
          {
              "text": "isNaN",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "parseFloat",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "isFinite",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "isInfinite",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "typeof",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "isNum",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "isValud",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "catalin",
      "category": "tip",
      "question": "Complete the load listener of `enkiImg` to get natural width and height:\n\n```javascript\nenkiImg.???('???',\n function() {\n\tconsole.log('Width: ',\n this.???);\n\tconsole.log('Height: ',\n this.???);\n});\n```\n",
      "answers": [
          {
              "text": "addEventListener",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "load",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "naturalWidth",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "naturalHeight",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "height",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "width",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "onload",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "catalin",
      "category": "tip",
      "question": "Complete the load listener of `enkiImg` to get natural width and height:\n\n```javasscript\nenkiImg.???('???',\n function() {\n\tconsole.log('Width: ',\n this.???);\n\tconsole.log('Height: ',\n this.???);\n});\n```\n",
      "answers": [
          {
              "text": "addEventListener",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "load",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "naturalWidth",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "naturalHeight",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "height",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "width",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "onLoad",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "onload",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "pawel",
      "category": "pattern",
      "question": "```javascript\nif(animal==='lion'){\n   run = true;\n}else{\n   run = false;\n}\n```\n\nHow would you express this using \na conditional operator?\n\n```javascript\nvar animal = 'lion';\nvar run = (animal === 'lion')? true:???;\n```\n",
      "answers": [
          {
              "text": "'false'",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "'undefined'",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "'null'",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "true",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "pawel",
      "category": "pattern",
      "question": "```javascript\nif(animal==='lion'){\n   run = true;\n}else{\n   run = false;\n}\n```\n\nHow would you express this using \na conditional operator?\n\n```javascript\nvar animal = 'lion';\nvar run = (animal === 'lion')? true:???;\n```\n",
      "answers": [
          {
              "text": "'false'",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "'undefined'",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "'null'",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "true",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "ioanna.ki",
      "category": "feature",
      "question": "Break `enkiLoop`:\n\n```javascript\nenkiLoop:\nfor(var i=0; i<5; i++) {\n if(condition) {\n   ??? ???\n }\n}\n```\n",
      "answers": [
          {
              "text": "break",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "enkiLoop",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "loop",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "yield",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "stop",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "enki",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "adamMontgomerie",
      "category": "feature",
      "question": "What does the following code return? ???\n\n```javascript\nNaN === NaN\n```\n",
      "answers": [
          {
              "text": "False",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "True",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "0",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Undefined",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "adamMontgomerie",
      "category": "feature",
      "question": "What will each of these output?\n\n```javascript\nconsole.log(Number(\"enki\")); // ???\nconsole.log(0/0 ===\n   Number(\"five\")); // ???\n```\n",
      "answers": [
          {
              "text": "NaN",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "false",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "enki",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "True",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "true",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "0",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "pawel",
      "category": "must-know",
      "question": "What are the following variable values?\n\n```javascript\nvar x = 0.6 - 0.2;\n???\nvar y = (0.2 * 10 + 0.3 * 10) / 10;\n???\n```\n",
      "answers": [
          {
              "text": "x: 0.39999999999999997",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "y: 0.5",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "x: 0.4",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "x: 0.6",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "y: 0.49999999999999997",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "y: 0.50000000000000004",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "pawel",
      "category": "must-know",
      "question": "```javascript\n//16 digits\nvar x = 9999999999999999;\nconsole.log(x);\n//x: ???\n```\n",
      "answers": [
          {
              "text": "10000000000000000 // 17 digits",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "9999999999999999 //16 digits",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "99999999999999999//17 digits",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "pawel",
      "category": "tip",
      "question": "What does the following code snippet output? ???\n\n```javascript\nconsole.log(3 - false);\nconsole.log(3 + false);\nconsole.log(3 + true);\n```\n",
      "answers": [
          {
              "text": "`3, 3, 4`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`2, 4, 3`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`3, 3, 3`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`4, 2, 3`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`2, 4, 4`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "pawel",
      "category": "tip",
      "question": "What does the this code output?\n\n```javascript\nconsole.log(3 + false); // ???\nconsole.log(3 + true); // ???\n```\n",
      "answers": [
          {
              "text": "3",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "4",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "undefined",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "pawel",
      "category": "must-know",
      "question": "Unlike other languages, JavaScript doesn't differentiate between ???.\n",
      "answers": [
          {
              "text": "types of numbers.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "data types.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "data structures.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "pawel",
      "category": "must-know",
      "question": "Unlike other languages, Javascript stores numbers as ???\n",
      "answers": [
          {
              "text": "double precision floating point",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "single precision floating point",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "long long",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "bigInt",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "pawel",
      "category": "pattern",
      "question": "The following code checks for ??? .\n\n```javascript\nmsg = 'Hello ' + (name || 'friend');\n```\n",
      "answers": [
          {
              "text": "All 3 of them",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Null",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "undefined",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Empty string",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "madhavi.penumatsa",
      "category": "how to",
      "question": "Complete the following snippet:\n\n```javascript\nvar ar = [1,2,3,'5'];\ndelete ar[2]; // ar = ???\n// splice(startingPos,deleteCount)\nar.splice(2,2); // ar = ???\n```\n",
      "answers": [
          {
              "text": "[1,2,undefined,’5’]",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "[1,2]",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "[1,3,’5’]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[1,’5’]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[1,2,3,’5’]",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "madhavi.penumatsa",
      "category": "how to",
      "question": "Let `var x = [1,4,6,8]` .\n\nAfter calling `splice(1,1)`  on x , it will contain ??? .\n",
      "answers": [
          {
              "text": "[1,6,8]",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "[4,6,8]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[1,undefined,6,8]",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "fsites",
      "category": "feature",
      "question": "Choose the right operator for each step to end up with x equal to 7:\n\n```javascript\nvar x = 5;\nx ??? 4; // make x == 20\nx ??? 2; // then, make x == 10\nx ??? 3; // lastly, make x == 7\n```\n",
      "answers": [
          {
              "text": "*=",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "/=",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "-=",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "++",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "=>",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "dummy-workout",
      "author": "fsites",
      "category": "feature",
      "question": "`x = x + y` can be shortened using ??? \n",
      "answers": [
          {
              "text": "x += y",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "x ++ y",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "x =+ y",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "errors",
      "author": "rosielowther",
      "category": "caveats",
      "question": "What scope is the catch clause of a try/catch statement in? ???\n",
      "answers": [
          {
              "text": "block scoped.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "function scoped.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "errors",
      "author": "rosielowther",
      "category": "caveats",
      "question": "Even though Javascript is function scoped, the variable in ??? is block scoped.\n",
      "answers": [
          {
              "text": "the catch clause",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "the try clause",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "a for loop",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "errors",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What statement will make the debugger stop at its line?\n\n???\n",
      "answers": [
          {
              "text": "`debugger;`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`stop;`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`break;`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`debug;`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "errors",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "How can you log variables into the console?\n\n    ???.???(myVar);\n",
      "answers": [
          {
              "text": "`console`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`alert`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`debugger;`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`addVar`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "errors",
      "author": "catalin",
      "category": "must-know",
      "question": "Complete the following code snippet such that the `try/catch` block will handle `SyntaxError`s:\n\n```javascript\n??? {\n    eval('3.14 + /2.71');\n} catch (???) {\n  if (err.??? == ???) {\n    //handling\n  }\n}\n```\n",
      "answers": [
          {
              "text": "`try`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`err`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`constructor`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`SyntaxError`",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "`e`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`EvalError`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`Error`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`name`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`typeof`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "errors",
      "author": "catalin",
      "category": "must-know",
      "question": "Complete the snippet so that the `try/catch` block will handle `SyntaxError`:\n\n```javascript\ntry {\n  eval('5 + /3');\n} ??? (e) {\n  if(e.constructor == ???) {\n   //handle\n  }\n}\n```\n",
      "answers": [
          {
              "text": "`catch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`SyntaxError`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`name`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`EvalError`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`try`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`syntax`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`Error`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "errors",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Complete the following block in the code snippet such that the comments make sense:\n\n    ??? {\n       throw \"my error\";\n    } ??? (e) {\n       //exception is caught here\n    } ??? {\n       // will always run\n    }\n",
      "answers": [
          {
              "text": "`try`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`catch`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`finally`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`final`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`do`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`while`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`new`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`for`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "errors",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Complete the missing keyword for throwing an exception:\n\n    ??? \"my exception\"\n",
      "answers": [
          {
              "text": "`throw`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`raise`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`catch`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`try`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`finally`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "errors",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Which of the following statements do you consider false?\n\n???\n",
      "answers": [
          {
              "text": "you need HTML to test JavaScript",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "online JavaScript environments allow the use of external libraries",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "you can share your code easier through online JavaScript environments",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "online JavaScript environments can ease the proccess of testing out code",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "errors",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Do online JavaScript environments allow the use of external libraries?\n\n???\n",
      "answers": [
          {
              "text": "yes",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "no",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "only React and Angluar",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "only jQuery",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "flow-control",
      "author": "jordanfish",
      "category": "caveats",
      "question": "Complete the following code snippet such that `A` is logged to the `console`:\n\n```javascript\nvar x = 1;\nswitch (???) {\n  ??? ???:\n    console.log('A');\n}\n// A\n```\n",
      "answers": [
          {
              "text": "`x`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`case`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`1`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`'1'`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`default`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`'5'`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "5",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`one`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`A`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`'A'`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "flow-control",
      "author": "jordanfish",
      "category": "caveats",
      "question": "What will the following snippet output?\n\n```javascript\nvar x = 10;\nswitch(x){\n  case '10':\n     console.log(\"Hi!\");\n}\n// ???\n```\n",
      "answers": [
          {
              "text": "`nothing`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`'Hi!'`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`an error`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "flow-control",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Complete the basic syntax of the following `switch` statement:\n\n    ??? (checker) {\n       ???: \"1\" :\n            ...\n            break;\n       case: \"2\" :\n            ...\n            break;\n       ???:\n            ...\n    }\n",
      "answers": [
          {
              "text": "`switch`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`case`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`default`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`break`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`if`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`else`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`if else`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "flow-control",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "How would you write an `if/else` statement?\n\n    if (condition <= 0) {\n      ...\n    } ??? ??? (condition > 0) {\n      ...\n    }\n",
      "answers": [
          {
              "text": "`else`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`if`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`case`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`break`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`if else`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`else if`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`switch`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`case`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`==`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "flow-control",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Complete the syntax of the following `do/while` loop such that `i` will be `10` at the end of it:\n\n    var i = 0;\n    ??? {\n      i++;\n    } ??? (i < ???)\n",
      "answers": [
          {
              "text": "`do`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`while`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`10`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`if`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`else`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`9`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`for`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "flow-control",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Complete the following `for` loop such that it makes sense:\n\n    ??? (??? i = 0; i < 10; ???) {\n       console.log(i);\n    }\n",
      "answers": [
          {
              "text": "`for`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`var`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`i++`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`while`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`do`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`i--`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "flow-control",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Iterate through the elements of myArray:\n\n```javascript\nvar myArray = [1,2,\"3\",\"item\"];\n\n??? (var i ??? ???){\n  console.log(i);\n}\n```\n",
      "answers": [
          {
              "text": "`for`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`of`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`myArray`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`Array`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`do`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "flow-control",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "To exit a loop, you can use the ??? keyword.\n",
      "answers": [
          {
              "text": "break",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "stop",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "finish",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "end",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-i",
      "author": "Bruno",
      "category": "how to",
      "question": "The following `returnArgs` function should an array containing the arguments with which it is called. Complete the missing gaps such that it works as intended:\n\n```javascript\nfunction returnArgs() {\n  return ???.prototype\n    .slice.call(???)\n}\n```\n",
      "answers": [
          {
              "text": "Array",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "arguments",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "argv",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "args",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "argvs",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "array",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "new Array",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-i",
      "author": "Bruno",
      "category": "how to",
      "question": "Turn the arguments of a method into a array:\n\n```javascript\nfunction myArray() {\n  var a = ???;\n  a = Array.prototype.???.call(a);\n  return a;\n}\n```\n",
      "answers": [
          {
              "text": "arguments",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "slice",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "splice",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "argv",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "args",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "sort",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "toArray",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-i",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What would the following snippet print?\n\n    function mult(x, y){\n      var z = x * x;\n    }\n\n    console.log(mult(2,3));\n    ???\n",
      "answers": [
          {
              "text": "`undefined`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`4`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`9`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`6`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`error`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-i",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What would the following snippet print?\n\n    function add(x, y){\n      var sum = x + y;\n    }\n\n    console.log(add(2,3));\n    ???\n",
      "answers": [
          {
              "text": "`undefined`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`5`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`false`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`error`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-i",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "In JavaScript, objects are passed into a function as a ???.\n",
      "answers": [
          {
              "text": "reference",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "value",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "string",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "json",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-i",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What will the following snippet output?\n\n    function changeProp(obj){\n      obj.name = \"John\";\n    }\n\n    var per = { name : \"Alex\"};\n    changeProp(per);\n    console.log(per.name);\n    // ???\n",
      "answers": [
          {
              "text": "John",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Alex",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "undefined",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "null",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-i",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Give the output:\n\n    alert(foo()); // ???\n    var foo = function() { return 'Enki'; }\n",
      "answers": [
          {
              "text": "error",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "alerts 'Enki'",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-i",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Give the output:\n\n    alert(foo()); // ???\n    function foo() { return 'Enki'; }\n",
      "answers": [
          {
              "text": "alerts 'Enki'",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "error",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-i",
      "author": "pawel",
      "category": "pattern",
      "question": "`Short circuit` the following code:\n\n```javascript\nfunction shortCir(name){\n  return ??? ??? 'John Doe';\n}\n```\n",
      "answers": [
          {
              "text": "name",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "||",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "&&",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "==",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-i",
      "author": "pawel",
      "category": "pattern",
      "question": "Complete the following code to return a *valid* String as name or a default value:\n\n```javascript\nfunction shortCir(name){\n  return ??? ??? 'John Doe';\n}\n```\n",
      "answers": [
          {
              "text": "name",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "||",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "&&",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "==",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-ii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Is the `name` field used in a **function expression** for defining functions mandatory?\n\n???\n",
      "answers": [
          {
              "text": "no",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "yes",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "only on browsers",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "only in older JavaScript versions",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-ii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Complete the following anonymous function:\n\n```javascript\nvar cube = ???(x) {\n   return x * x * x;\n};\n```\n",
      "answers": [
          {
              "text": "function",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "let",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "name",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "{}",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-ii",
      "author": "catalin",
      "category": "feature",
      "question": "When can a scenario occur where calling functions do not exist? ???\n",
      "answers": [
          {
              "text": "When scripts are shared between different parts of a website.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "When functions haven't been declared properly.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "When scripts haven't been passed or imported properly.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-ii",
      "author": "catalin",
      "category": "feature",
      "question": "Complete the `if` statement to check if a function exists:\n\n```javascript\nif(??? myFunction === ???){\n  myFunction();\n}\n```\n",
      "answers": [
          {
              "text": "typeof",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "”function”",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "function",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "!",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "undefined",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-ii",
      "author": "NomaDube",
      "category": "feature",
      "question": "What is the following code? ???\n\n```javascript\nvar multiply = function times(x, y) {\n   return x * y;\n};\n```\n",
      "answers": [
          {
              "text": "A function expression of a function named `times` assigned to the variable `multiply`.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "A function `times` being declared.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Function expression of an anonymous function.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-ii",
      "author": "NomaDube",
      "category": "feature",
      "question": "What is the following?\n\n```javascript\nvar multiply = function(x, y) {\n   return x * y;\n}\n```\n\n???\n",
      "answers": [
          {
              "text": "function expression of an anonymous function",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "function defined with `function` constructor",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "function expression of a `function` named `mult`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "all",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "none",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-ii",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Complete the function expression in the following code snippet such that it makes sense:\n\n    ??? x = ??? add(x, y, z){\n        ??? x + y + z;\n    }\n    console.log(x(1, 2, 3)); \n",
      "answers": [
          {
              "text": "`var`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`function`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`return`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`console.log`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`get`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`fn`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`()`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-ii",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Complete the function expression in the following code snippet such that it makes sense:\n\n    ??? x = ??? add(x, y, z){\n        ??? x + y + z;\n    }\n    console.log(x(1, 2, 3)); \n",
      "answers": [
          {
              "text": "`var`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`function`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`return`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`console.log`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`get`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`fn`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`()`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "Fill in the gaps such that the `naturalHalf` function, given an input number, will return `undefined` for every odd number and the number's half for each even number:\n\n```javascript\nfunction naturalHalf(number) {\n  if (number ??? 2 == 0) {\n    ???\n  }\n  ???\n}\n```\n",
      "answers": [
          {
              "text": "%",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "return number/2",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "return",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "return NaN",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "return number%2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "return null",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "returns undefined",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "/",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "number",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "Fill in the output of the following `foo` calls:\n\n```javascript\nfunction foo(num) {\n  if (num === 1) {\n    return;\n  }\n  if (num === 2) {\n    return 'Enki';\n  }\n}\nfoo(1); // = ???\nfoo(2); // = ???\nfoo(3) === foo(1); // = ???\n```\n",
      "answers": [
          {
              "text": "undefined",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Enki",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "true",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "null",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "false",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "NaN",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-ii",
      "author": "rosielowther",
      "category": "best practice",
      "question": "A use case of the IIFE pattern is to wrap the whole code in an IIFE and pass in the ??? object. This could be given an alias of ???. Global public properties could then be made accessible.\n",
      "answers": [
          {
              "text": "`window` ",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`global` ",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`modal` ",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`new` ",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`returned`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-ii",
      "author": "rosielowther",
      "category": "best practice",
      "question": "What's the syntax of an **IIFE** ?\n\n```javascript\n(??? () {\n}???);\n```\n",
      "answers": [
          {
              "text": "`function`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`()`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`{}`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`(`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`)`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`name`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`call`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-iii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Complete the code snippet below to return a new function with its `this` being equal to `thisArg`:\n\n```javascript\n???(???, [p1, [???, [...]]])\n```\n",
      "answers": [
          {
              "text": "`bind`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`thisArg`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`p2`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`tie`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`next`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`this`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`param`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`function`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`combine`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-iii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What can be used to make a function be always called with a **particular** `this` value?\n\n???\n",
      "answers": [
          {
              "text": "`bind()`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`push()`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "nothing",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`return`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`new`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-iii",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Which method will change the `this` context of a JavaScript function call?\n???\n",
      "answers": [
          {
              "text": "`.call(obj)`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`.context(obj)`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`.this = ___`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`.object()`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-iii",
      "author": "tommarshall",
      "category": "must-know",
      "question": "Using the .???() method will change the ??? context of a JavaScript function call\n",
      "answers": [
          {
              "text": "`call`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`this`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`context`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`scope`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-iii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What will the context default to when executing a function in strict mode? ???\n",
      "answers": [
          {
              "text": "undefined",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "this",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Window",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "navigator",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "bind",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "new",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-iii",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What represent the **context** of a function in Javascript?\n\n???\n",
      "answers": [
          {
              "text": "this",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "undefined",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Window",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "navigator",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "history",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "bind",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "new",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-iii",
      "author": "Stefantudose",
      "category": "must-know",
      "question": "The ??? method lets you invoke the method using an array as an argument whereas the ??? method require explicit parameters.\n",
      "answers": [
          {
              "text": "`.apply`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`.call`",
              "correct": true,
              "correctIndex": 1
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-iii",
      "author": "Stefantudose",
      "category": "must-know",
      "question": "What must be used so explicit arguments are required?\n\n```javascript\nfunction.???(obj, 1, 2, 3);\n```\n",
      "answers": [
          {
              "text": "`call`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`apply`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-iii",
      "author": "tommarshall",
      "category": "must-know",
      "question": "If `currObj` is not supplied, what is it set to by default? ???\n",
      "answers": [
          {
              "text": "The global object.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Equal to null.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "The previous object.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "The boolean false.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "functions-iii",
      "author": "tommarshall",
      "category": "must-know",
      "question": "What is the object and the arguments of the function?\n\n```javascript\ncallObject.call(null, 4, 2);\n```\n\n???\n",
      "answers": [
          {
              "text": "Object: null, Arguments: 4,2",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Object: 4, Arguments 2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Object: 4, Arguments: null, 2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "This gives an error",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "in-depth-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "Find the variable scopes in the following code:\n\n```javascript\nvar flag = true; //flag is ???\n\nfunction test() {\n   var x;\n   function test2() { // test2 is in ???\n      var y;\n   }\n}\n```\n",
      "answers": [
          {
              "text": "global",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "test",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "test2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "document",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "inline",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "var",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "project",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "in-depth-ii",
      "author": "rosielowther",
      "category": "feature",
      "question": "Find each variable scope in the following code:\n\n```javascript\nvar a = 1; // a is in global\nvar b = 2; // b is in ???\nfunction foo(){ // foo is in global\n  var a = 2; // a is in foo\n  function fee(){ // fee is in ???\n  var b = 3; // b is in ???\n  }\n}\n```\n",
      "answers": [
          {
              "text": "global",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "foo",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "fee",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "local",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "in-depth-ii",
      "author": "pawel",
      "category": "tip",
      "question": "A polyfill provides... ???\n",
      "answers": [
          {
              "text": "technology that a developer expects the browser to provide natively.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "new features.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "all HTML tags.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "in-depth-ii",
      "author": "pawel",
      "category": "tip",
      "question": "A polyfill is a downloadable code that provides \n\n??? .\n",
      "answers": [
          {
              "text": "support for older browsers",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "new features",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "all HTML tags",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "in-depth-ii",
      "author": "dean",
      "category": "pattern",
      "question": "Complete the missing gaps such that the log statements on the last lines will print the commented output.\n\n```javascript\nvar Rectangle = function() {\n  this.??? = null\n  this.length = null\n}\n\nRectangle.???\n  .??? = function(width) {\n    this.width = width\n    ???\n }\n\n???.prototype\n  .setLength = function(length)  {\n    this.??? = length\n    return ???\n  }\n\nconst r = (new Rectangle())\n  .setWidth(20)\n  .setLength(30)\n\nconsole.log(r.length) // 30\nconsole.log(r.width) //20\n```\n",
      "answers": [
          {
              "text": "width",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "prototype",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "setWidth",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "return this",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "Rectangle",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "length",
              "correct": true,
              "correctIndex": 5
          },
          {
              "text": "this",
              "correct": true,
              "correctIndex": 6
          },
          {
              "text": "new",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "setLength",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "new",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "return r",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "r",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "return",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "return null",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "return undefined",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "return width",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "in-depth-ii",
      "author": "dean",
      "category": "pattern",
      "question": "How is method chaining typically enabled?\n\n???\n",
      "answers": [
          {
              "text": "Implementing methods that return `this`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "No need for implementation",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Updating the object to allow this",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "in-depth-ii",
      "author": "dean",
      "category": "pattern",
      "question": "Complete the following snippet to output “I enjoy studying”:\n\n```javascript\nfunction Hobby(hobby){\n   this.hobby = hobby;\n}\nHobby.???.??? = function(){\n   console.log(\"I enjoy \" + this.hobby);\n}\n \nfunction MyHobby(hobby){\n   this.hobby = hobby;\n}\n   \n???.prototype = new Hobby();\nvar student = new MyHobby(\"studying\");\nstudent.sayHobby();\n```\n",
      "answers": [
          {
              "text": "prototype",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "sayHobby",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "MyHobby",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "studying",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "printHobby",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "in-depth-ii",
      "author": "dean",
      "category": "pattern",
      "question": "An object in JavaScript that can be inherited from is called ???.\n",
      "answers": [
          {
              "text": "prototype",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "variable",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "function",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "in-depth-ii",
      "author": "rosielowther",
      "category": "best practice",
      "question": "What does the following JS code return when ran? ???\n\n```javascript\nvar str = \"if(flag){2*8;} else{-2*8;}\";\nvar flag = false;\nvar b = eval(str);\n```\n",
      "answers": [
          {
              "text": "-16",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "16",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "undefined",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "NaN",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "in-depth-ii",
      "author": "rosielowther",
      "category": "best practice",
      "question": "Evaluating javascript code passed as a string is done by ???\n",
      "answers": [
          {
              "text": "eval()",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "evil()",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "(string).toJS()",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "intro-js",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Which of the following is the correct method for outputting information to the console? ???\n",
      "answers": [
          {
              "text": "`console.log();`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`console.write();`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`console.print();`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`console.println();`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "intro-js",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Log a message in the `console`:\n\n```javascript\n???.???(\"my message\");\n```\n",
      "answers": [
          {
              "text": "`console`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`log`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`print`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`system`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`output`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`show`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`warn`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "intro-js",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What syntax is used in *JavaScript* for **single line** comments?\n\n???\n",
      "answers": [
          {
              "text": "//",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`/* */`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`#`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "intro-js",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Is the following line of code **valid**?\n\n```javascript\nvar 777jackpot = \"jackpot\";\n// line is ???\n```\n",
      "answers": [
          {
              "text": "not valid",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "valid",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "intro-js",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "which of the following is a valid comment?\n\n```javascript\n(1. // first comment\n(2. <!-- second comment\n(3. /* third comment */\n```\n\n ???\n",
      "answers": [
          {
              "text": "1, 2 & 3",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "1",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "1 & 3",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "2",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "intro-js",
      "author": "nem035",
      "category": "must-know",
      "question": "Which scope are `var`s defined in?\n\n???\n",
      "answers": [
          {
              "text": "function",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "global",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "window",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "strict",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "intro-js",
      "author": "nem035",
      "category": "must-know",
      "question": "What operator is used to declare a variable in the *function scope*?\n\n```javascript\n??? answer = 42;\n```\n",
      "answers": [
          {
              "text": "var",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "variable",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "const",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "string",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "int",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "double",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "intro-js",
      "author": "nem035",
      "category": "must-know",
      "question": "Complete the missing gaps in the following HTML snippet such that JavaScript code contained by an `enki.js` file will be ran via a script tag:\n\n```html\n??? ???=\"???\" ??? ???\n```\n",
      "answers": [
          {
              "text": "`<script`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "src",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "enki.js",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": ">",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "`</script>`",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "/>",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`<script />`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`<script>`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "intro-js",
      "author": "nem035",
      "category": "must-know",
      "question": "Complete the missing HTML tags to make the JavaScript code run directly on the web page.\n\n```html\n???\nconsole.log(\"enki\");\n???\n```\n",
      "answers": [
          {
              "text": "`<script>`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`</script>`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`<script/>`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "/>",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`<script`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "src=",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "intro-js",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Can a server's backend be written in JavaScript?\n\n???\n",
      "answers": [
          {
              "text": "yes",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "no",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "depends on the operating system",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "intro-js",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Why was **JavaScript** originally developed?\n\n???\n",
      "answers": [
          {
              "text": "To add functionality to web pages",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "To create databases",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "To enhance Java",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "To replace HTML",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "js-history",
      "author": "adamMontgomerie",
      "category": "tip",
      "question": "What does the following JS code output? ???\n\n```javascript\nvar a = 20;\nvar b = 4;\nvar c = 12;\n\nvar x = a - (-b * c);\nconsole.log(x);\n```\n",
      "answers": [
          {
              "text": "68",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "-28",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "192",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "0",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "undefined",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "-68",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "-192",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "js-history",
      "author": "adamMontgomerie",
      "category": "tip",
      "question": "The processing of operations starts with ??? operator if no brackets are used.\n",
      "answers": [
          {
              "text": "left-most",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "right-most",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "middle",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "js-history",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "How is **JavaScript** related to **Java**?\n\n???\n",
      "answers": [
          {
              "text": "They are not related",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "JavaScript has its origins in Java",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "They are basically the same",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Java has its origins in JavaScript",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "js-history",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "The first version of JavaScript was developed by ??? in only 10 days.\n",
      "answers": [
          {
              "text": "Brendan Eich",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Bjarne Stroustrup",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "James Gosling",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Linus Torvalds",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "js-history",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What is EcmaScipt?\n\n???\n",
      "answers": [
          {
              "text": "a standard that drives JavaScript development",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "a JavaScript dialect",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "the same as JavaScript",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "a JavaScript extension",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "js-history",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Which one of the following came first ?\n\n???\n",
      "answers": [
          {
              "text": "JavaScript",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "EcmaScript-262",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "EcmaScript 2016",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "js-history",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "How do you enable **strict mode** in EcmaScript 5?\n\n    \"??? ???\";\n",
      "answers": [
          {
              "text": "`use`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`strict`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`mode`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`str`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`let`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`var`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`strict-mode`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`enable`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`on`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "js-history",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "How do you enable **strict mode** in EcmaScript 5?\n\n    \"??? ???\";\n",
      "answers": [
          {
              "text": "`use`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`strict`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`mode`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`str`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`let`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`var`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`strict-mode`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`enable`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`on`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "numbers",
      "author": "catalin",
      "category": "how to",
      "question": "Complete the following code snippet:\n\n```javascript\n// convert 1423 to base 2\n console.log((1423).toString(???));\n// convert \"ad23e1\" from base 16 to base 10\nconsole.log(???(\"ad23e1\",???));\n```\n",
      "answers": [
          {
              "text": "2",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "parseInt",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "16",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "10",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "”base 10”",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "numbers",
      "author": "catalin",
      "category": "how to",
      "question": "Complete the following code snippet:\n\n```javascript\n// convert 132 to base 16\nconsole.log((132).toString(???));\n// convert \"ead2\" from base 15 to base 10\nconsole.log(???(\"ef2\",???));\n```\n",
      "answers": [
          {
              "text": "16",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "parseInt",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "15",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "10",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "”base 10”",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "numbers",
      "author": "catalin",
      "category": "caveats",
      "question": "The output of the following snippet is ???\n\n    console.log((1.3 + 2.3) == 3.6);\n",
      "answers": [
          {
              "text": "false",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "true",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "numbers",
      "author": "catalin",
      "category": "caveats",
      "question": "Instead of comparing two floating numbers, the best way to avoid *inaccuracies* is to ??? the numbers and compare the result to ???.\n",
      "answers": [
          {
              "text": "substract",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "third expected value",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "sum",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "numbers",
      "author": "catalin",
      "category": "caveats",
      "question": "what is 0.1 + 0.2?\n\nWhat will be the value of x?\n\n```javascript\nvar x = 0.2 + 0.1;\nconsole.log(x);\n```\n\n ???\n",
      "answers": [
          {
              "text": "0.30000000000000004",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "0.3",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "0.2999999999999999",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "NaN",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "numbers",
      "author": "jordanfish",
      "category": "caveats",
      "question": "Complete the code to check if variable `z` is *not a number*.\n\n```javascript\nvar z = NaN\n???.???(z) // true\n```\n",
      "answers": [
          {
              "text": "Number",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "isNaN",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "isNotNaN",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Math",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "validate",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "NaN",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "check",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "is",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "numbers",
      "author": "jordanfish",
      "category": "caveats",
      "question": "The following code snippet outputs ???\n\n```javascript\nconsole.log(typeof NaN);\n```\n",
      "answers": [
          {
              "text": "number",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "NaN",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "false",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Infinite",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "numbers",
      "author": "jordanfish",
      "category": "caveats",
      "question": "is NaN a number?\n\nWhat is the output of this line?\n\n```javascript\nconsole.log(typeof(NaN));\n```\n\n???\n",
      "answers": [
          {
              "text": "number",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "object",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "function",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "undefined",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "numbers",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What will be the output of the following function call?\n\n```javascript\nconsole.log(parseInt(\"abc\",10));\n# ???\n```\n",
      "answers": [
          {
              "text": "`NaN`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`Error`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`10`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "numbers",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What method would you use to parse the following string so that it doesn't return `NaN`:\n\n    ???(\"0.2\", 10);\n",
      "answers": [
          {
              "text": "`parseFloat`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`parseInt`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`parseString`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`parseDouble`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "objects",
      "author": "pawel",
      "category": "how to",
      "question": "Complete the code snippet:\n\n```javascript\nvar test = {\n  prop1: 1,\n  prop2: 2\n}\n// set prop1 to undefined\ntest.prop1 = ???;\n//remove prop2\n??? ;\n```\n",
      "answers": [
          {
              "text": "undefined",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "delete test.prop2",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "null",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "delete prop2",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "objects",
      "author": "pawel",
      "category": "how to",
      "question": "What is the output of the following code snippet?\n\n```javascript\nvar obj = { one: 1 }\nobj.one = undefined;\nconsole.log(obj);\n// ???\n```\n",
      "answers": [
          {
              "text": "`{ one: undefined }`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`{ one: null }`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`{ }`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "objects",
      "author": "pawel",
      "category": "feature",
      "question": "What does the following JS code return? ???\n\n```javascript\nenki = new Object();\nenki.practiceQuestion = 'true';\n\nfunction tricky() {\n   enki.newQuestion = enki.practiceQuestion;\n   delete enki.practiceQuestion;\n}\n\nenki.hasOwnProperty('practiceQuestion');\nenki.hasOwnProperty('magicPowers');\ntricky();\nenki.hasOwnProperty('practiceQuestion');\n```\n",
      "answers": [
          {
              "text": "True, False, False",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "True, False, True",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "True, True, False",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "False, True, True",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "objects",
      "author": "pawel",
      "category": "feature",
      "question": "`obj.hasOwnProperty('prop')` returns false if\n\n ???\n",
      "answers": [
          {
              "text": "obj hasn’t got ‘prop’ as property",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "obj has the property",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "obj has the property and its value is null",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "objects",
      "author": "pawel",
      "category": "best practice",
      "question": "When do you need to quote object properties names in older JavaScript engines?\n\n???\n",
      "answers": [
          {
              "text": "when the name is a special keyword",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "always",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "never",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "when the property type is \"string\"",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "only when the property name is \"delete\"",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "objects",
      "author": "pawel",
      "category": "best practice",
      "question": "How would you rewrite the commented object property in order to avoid `Syntax Error` with old JS engines?\n\n```javascript\nvar dog = {\n  name: 'Max',\n  age: '5',\n  // typeof: 'beagle'\n  ??? ???\n}\n```\n",
      "answers": [
          {
              "text": "'typeof':",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "'beagle'",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "typeof",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "type of",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "beagle",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "'name'",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "name",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "'typeof'",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "typeof:",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "objects",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Consider the following object:\n\n    var car = {\n      model: \"AwsomeCar\",\n      color: \"blue\",\n      noDoors: 4\n    };\n    var test = \"model\";\n\nWould the following line print \"model\"?\n\n    console.log(car.test); // ???\n",
      "answers": [
          {
              "text": "no",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "yes",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "objects",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Which line adds a new property to an object that looks like this:\n\n    var per = {\n      firstName = \"John\",\n      lastName = \"Smith\"\n    };\n    ???\n",
      "answers": [
          {
              "text": "`per.age = 40;`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`var per.age = 40;`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`per[age] = 40;`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`per.addNewProperty(age,40);`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "objects",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Fill in the gaps of the following constructor function such that the code below it works as intended:\n\n```javascript\nfunction ???(name) {\n  this.name = ???;\n  this.??? = {\n    ???: ???() {\n      console.log('Hello there')\n    }\n  }\n}\n\nconst flash = new Superhero('Flash')\nflash.superpowers.greet()\n// Hello there\n```\n",
      "answers": [
          {
              "text": "Superhero",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "name",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "superpowers",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "greet",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "function",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "hello",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "console",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "log",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Flash",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "new",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "superhero",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "powers",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "objects",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "You can invoke an object's method by writing:\n\n???\n",
      "answers": [
          {
              "text": "ob.methodName();",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "ob.methodName;",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "methodName(ob);",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-i",
      "author": "catalin",
      "category": "tip",
      "question": "Create a random `hex` colour:\n\n```javascript\n'???' + Math.???()\n            .???(16)\n            .substr(-6);\n```\n",
      "answers": [
          {
              "text": "`#`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`random`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`toString`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`*`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`+`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`generate`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`hex`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`toHex`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`stringHex`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`new`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-i",
      "author": "catalin",
      "category": "tip",
      "question": "Create a random `hex` color:\n\n```javascript\n'#' + ???.???()\n         .toString(16)\n         .substr(-6);\n```\n",
      "answers": [
          {
              "text": "`Math`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`random`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`hex`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`Number`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`int`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`Hex`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-i",
      "author": "pawel",
      "category": "how to",
      "question": "What does the following code snippet output? ???\n\n```javascript\nfunction currency(n) {\n   n = parseFloat(n);\n   return isNaN(n) ? \n         false : n.toFixed(3);\n}\nconsole.log(\n         currency('10.93719'));\n```\n",
      "answers": [
          {
              "text": "10.937",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "10.9372",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "10.938",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "10.9",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "11",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-i",
      "author": "pawel",
      "category": "how to",
      "question": "What does this output?\n\n```javascript\nfunction currency(n){\n  n = parseFloat(n);\n  return isNaN(n) ? false : n.toFixed(2);\n}\nconsole.log(currency('1234.567'));\n\n???\n```\n",
      "answers": [
          {
              "text": "1234.57",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "1234.56",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "12",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-i",
      "author": "Bruno",
      "category": "tip",
      "question": "`console.log((\"0044742323412\").slice(-3));`  \nOutputs ??? , while\n`console.log((32410000).slice(-5));`\n\noutputs ??? .\n",
      "answers": [
          {
              "text": "412",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "throws an error",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "10000",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "004",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-i",
      "author": "Bruno",
      "category": "tip",
      "question": "`console.log((\"123\").slice(-4));` \n\n outputs ???\n",
      "answers": [
          {
              "text": "123",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "0123",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "0001",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-i",
      "author": "catalin",
      "category": "how to",
      "question": "Complete the following code snippet:\n\n```javascript\n//convert the number to length 3\nconsole.log((12.4513).???(3);\n//convert the number to have length 3 \n//after the decimal point\nconsole.log((12.4513).???(3);\n```\n",
      "answers": [
          {
              "text": "toPrecision",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "toFixed",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "dec",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "length",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-i",
      "author": "catalin",
      "category": "how to",
      "question": "Complete the code snippet below as to get the result commented:\n\n```javascript\nvar pi = 3.141592;\nconsole.log(pi.???(2));\n// 3.14\n```\n",
      "answers": [
          {
              "text": "`toFixed`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`toPrecision`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-i",
      "author": "Bruno",
      "category": "pattern",
      "question": "What is the return value of the following line?\n\n```javascript\nMath.max.apply(null, [5,8,2]);\n// ???\n```\n",
      "answers": [
          {
              "text": "`8`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`NaN`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-Infinity`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`5`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-i",
      "author": "Bruno",
      "category": "pattern",
      "question": "What is the return value of the following line?\n\n```javascript\nMath.max.apply(null, [5,8,2]);\n// ???\n```\n",
      "answers": [
          {
              "text": "`8`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`NaN`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`-Infinity`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`5`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-i",
      "author": "pawel",
      "category": "hack",
      "question": "What does the following JS code snippet output?\n\n```javascript\nconsole.log(~~15); // ???\nconsole.log(~~\"7.08\"); // ???\nconsole.log(~~\"-1.92\"); // ???\nconsole.log(~~{}); // ???\n```\n",
      "answers": [
          {
              "text": "15",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "7",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "-1",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "0",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "-15",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "1.5",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "7.1",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "8",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "-2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "1",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "NaN",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-i",
      "author": "pawel",
      "category": "hack",
      "question": "The following code will output:\n\n```javascript\nconsole.log( ~~12.34 ); // ???\nconsole.log( ~~\"56.78\" ); // ???\nconsole.log( ~~\"Sunny\" ); // ???\n```\n",
      "answers": [
          {
              "text": "12",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "56",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "0",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "NaN",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "”56”",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-ii",
      "author": "rosielowther",
      "category": "best practice",
      "question": "Change the code in order for it to run without using `with` :\n\n```javascript\nvar a, x;\n  \n/* with (Math) { \n  x = random();\n  a = exp(x);\n} */\nx = ??? ;\na = ??? ;\n```\n",
      "answers": [
          {
              "text": "Math.random()",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Math.exp(x)",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "Math.exp()",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Math.random(x)",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-ii",
      "author": "rosielowther",
      "category": "best practice",
      "question": "A downside of using `with` is that ???\n",
      "answers": [
          {
              "text": "you can make global variables by mistake.",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "it shortens code.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "you don’t have to repeat object references.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-ii",
      "author": "jordanfish",
      "category": "caveats",
      "question": "Fill in the missing gaps to create a date on the 15 December 2019\n\n```javascript\nvar date = new ???(???, ???, ???)\nconsole.log(date)\n// Sun Dec 15 2019 00:00:00 GMT+0000 (GMT)\n```\n",
      "answers": [
          {
              "text": "Date",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "2019",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "11",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "15",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "2018",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "12",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "0",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "13",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "14",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "date",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "D",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "DateTime",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-ii",
      "author": "jordanfish",
      "category": "caveats",
      "question": "What will the following code snippet print?\n\n```javascript\nvar date = new Date(2016, 1, 5);\nconsole.log(date);\n// Tue ??? ??? 2016\n// 00:00:00 GMT-700\n```\n",
      "answers": [
          {
              "text": "Feb",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "5",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "0",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Jan",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Dec",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-ii",
      "author": "jordanfish",
      "category": "caveats",
      "question": "how does JavaScript's Date object work?\n\n```javascript\nconsole.log(new Date(2016, 5, 31));\n```\n\n???\n",
      "answers": [
          {
              "text": "July 1 2016",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "June 31 2016",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "May 31 2016",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "June 1 2016",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-ii",
      "author": "Bruno",
      "category": "tip",
      "question": "What is missing from the following code snippet for getting the current time in milliseconds? \n\n```javascript\n???new ???();\n```\n",
      "answers": [
          {
              "text": "`+`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`Date`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`=`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`typeof`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`milliseconds`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`mseconds`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-ii",
      "author": "Bruno",
      "category": "tip",
      "question": "Get the current time in milliseconds(since 1 Jan 1970):\n\n    var time = Date.???;\n",
      "answers": [
          {
              "text": "now();",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "getMillis();",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "getMilliseconds();",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-ii",
      "author": "pawel",
      "category": "how to",
      "question": "Make `hi` run every 2 seconds:\n\n```javascript\nfunction hi(){\n  alert(\"Hi!\");\n}\nvar loop = ???\n   .???(hi,???);\n```\n",
      "answers": [
          {
              "text": "window",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "setInterval",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "2000",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "200",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "function",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "recipes-ii",
      "author": "pawel",
      "category": "how to",
      "question": "Make `hi` run every 2 seconds:\n\n```javascript\nfunction hi(){\n  alert(\"Hi!\");\n}\nvar loop = ???\n   .???(hi,???);\n```\n",
      "answers": [
          {
              "text": "window",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "setInterval",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "2000",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "200",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "function",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "scope",
      "author": "rosielowther",
      "category": "must-know",
      "question": "This code ??? run:\n\n```javascript\nfunction foo(){\n  var localVariable = 'lVar';\n  return function bar(){\n     return localVariable;\n  }\n}\nfoo()();\n```\n",
      "answers": [
          {
              "text": "will",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "will not",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "scope",
      "author": "rosielowther",
      "category": "must-know",
      "question": "A *closure* is created when you ???.\n",
      "answers": [
          {
              "text": "nest a function inside another",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "declare a function",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "call a function",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "scope",
      "author": "adamMontgomerie",
      "category": "feature",
      "question": "The following code will output ???\n\n```javascript\ns = \"enki\";\nconsole.log(s);\nvar s;\n```\n",
      "answers": [
          {
              "text": "enki",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "undefined",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "nothing",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "scope",
      "author": "adamMontgomerie",
      "category": "feature",
      "question": "The following code outputs ???\n\n```javascript\nconsole.log(v);\nvar v = \"enki\";\n```\n",
      "answers": [
          {
              "text": "undefined",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "enki",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "nothing",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "scope",
      "author": "AlexYancey",
      "category": "feature",
      "question": "What will the following functions print? ???\n\n    var e = 1;\n    function run(){\n        console.log(e);\n        var e = 4;\n    }\n    run();\n\n    var c = 1;\n    function calc() {\n        console.log(c*c);\n        c = 4;\n    }\n    calc();\n",
      "answers": [
          {
              "text": "`run: undefined, calc: 1`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`run: 1, calc: 1`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`run: 4, calc: 1`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`run: 4, calc: 4`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`run: undefined, calc: undefined`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "scope",
      "author": "AlexYancey",
      "category": "feature",
      "question": "What will this print\n\n```javascript\nvar a = 1;\nfunction go(){\n    console.log(a);\n    var a = 2;\n}\ngo();\n// ???\n```\n",
      "answers": [
          {
              "text": "`undefined`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`1`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`2`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "scope",
      "author": "adamMontgomerie",
      "category": "tip",
      "question": "What will the following snippet do?\n\n```javascript\nvar x = 'foo';\n(function bar() {\n {\n   var x = 5\n }\n console.log(x)\n})()\n```\n\n???\n",
      "answers": [
          {
              "text": "log 5",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "log 'foo'",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "raise an error",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "can't be compiled",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "scope",
      "author": "adamMontgomerie",
      "category": "tip",
      "question": "What's the output of the `alert()` method?\n\n```javascript\nvar a = 1;\nfunction bar() {\n  if(2 === 2) {\n    var a = 0;\n  }\n  alert(a); // ???\n}\n```\n",
      "answers": [
          {
              "text": "0",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "1",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "3",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "undefined",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "scope",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Assuming the scopes specified in the comments, does the snippet use **non-strict** or **strict** mode?\n\n```javascript\nfunction bar(foo){\n    foo = \"hello\"; // local scope\n    baz = \"world\"; // global scope\n}\n```\n\n???\n",
      "answers": [
          {
              "text": "`non-strict`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`strict`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "scope",
      "author": "rosielowther",
      "category": "must-know",
      "question": "Non-strict mode allows the automate creation of a variable in ??? scope, while *strict mode* would throw an error if the ??? variable is not declared.\n",
      "answers": [
          {
              "text": "global",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "local",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "strict",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "scope",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What does **hoisting** mean?\n\n???\n",
      "answers": [
          {
              "text": "Variable declarations are processed before code is executed",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "You must first declare variables before methods",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "A general rule for **linters**",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "You can have multiple variables with the same name",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "strings",
      "author": "fsites",
      "category": "best practice",
      "question": "JSON standards require strings to be ??? quoted. However some modern linters recommend using ??? quotes only in JavaScript.\n",
      "answers": [
          {
              "text": "double",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "single",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "no",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "strings",
      "author": "fsites",
      "category": "best practice",
      "question": "JSON standard requires every string to be ??? quoted.\n",
      "answers": [
          {
              "text": "double",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "single",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "strings",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What special character is used to add a `new line` to strings?\n\n```javascript\nvar myString = 'this will ???\n       be displayed on two lines';\n```\n",
      "answers": [
          {
              "text": "`\\n`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`+`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`\"`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`\\`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`\\r`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`\\t`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "strings",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Which one of the following is correct ?\n\n```javascript\nvar company = \"Enki\";\nvar company = 'Enki';\n```\n\n???\n",
      "answers": [
          {
              "text": "both",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "first",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "second",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "none",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "strings-ii",
      "author": "pawel",
      "category": "best practice",
      "question": "Fill in the gaps of the following snippet such that the `squares` string will contain, one after the other, the square value of all numbers from `1` to `10`:\n\n```javascript\nvar squares = '';\nfor (var i = 1; i ??? 10; i ++) {\n  squares ??? i*i ??? ' '\n}\nconsole.log(squares)\n// \"1 4 9 16 25 36 49 64 81 100 \"\n```\n",
      "answers": [
          {
              "text": "<=",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "+=",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "+",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "=+",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "<",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": ">",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "++",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "join",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "concat",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "/",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "%",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "strings-ii",
      "author": "pawel",
      "category": "best practice",
      "question": "What's the more efficient way to build `HTML` strings in modern browsers?\n\n```bash\n1) + (plus operator)\n2) join()\n3) concat()\n```\n\n???\n",
      "answers": [
          {
              "text": "1",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "3",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "strings-ii",
      "author": "jordanfish",
      "category": "how to",
      "question": "What standard is used in ES2015 for multi line string variables? ???\n",
      "answers": [
          {
              "text": "Backticks",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Single quotes",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Double quotes",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "No quotes",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "strings-ii",
      "author": "jordanfish",
      "category": "how to",
      "question": "The new standard for multi-lined string is using ??? .\n",
      "answers": [
          {
              "text": "backticks",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "single quotes",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "double quote",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "strings-ii",
      "author": "jordanfish",
      "category": "caveats",
      "question": "Complete the following code snippet to replace `+` with `%2B`:\n\n```javascript\nvar s = 'x+y+z=w';\ns=s.replace(???,'%2B');\nconsole.log(s); // x%2By%2Bz=w\n```\n",
      "answers": [
          {
              "text": "`/\\+/g`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`\\\\+/g`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`\\+/g`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`/\\+/`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "strings-ii",
      "author": "jordanfish",
      "category": "caveats",
      "question": "??? is used to replace one or more occurrences of a substring with another string.\n",
      "answers": [
          {
              "text": "String.replace()",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "String.map()",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "String.change()",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "String.delete()",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "strings-ii",
      "author": "fsites",
      "category": "feature",
      "question": "What does the following code snippet return? ???\n\n```javascript\nvar str = \"Practicing my RegExp with Enki!\";\n\nvar containsEnki = /Enki/i;\ncontainsEnki.test(str);\n\nvar containsRegExp = /Regular Expressions/i;\ncontainsRegExp.test(str);\n```\n",
      "answers": [
          {
              "text": "True, False",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "True, True",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "False, True",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "False, False",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "strings-ii",
      "author": "fsites",
      "category": "feature",
      "question": "Matching a string with a RegEx is done by \n\n???\n",
      "answers": [
          {
              "text": "regex.test(string);",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "regex.match(string);",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "regex.check(string);",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types",
      "author": "rosielowther",
      "category": "must-know",
      "question": "The following code outputs ???\n\n```javascript\nfunction foo(num){\n  return num/2;\n}\nconsole.log(foo(\"sum\"));\n```\n",
      "answers": [
          {
              "text": "NaN",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "undefined",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "null",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types",
      "author": "rosielowther",
      "category": "must-know",
      "question": "What will this print?\n\n```javascript\nvar x = 0/0;\nconsole.log(x);\n// ???\n```\n",
      "answers": [
          {
              "text": "`NaN`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`undefined`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`null`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "One the first line declare a **boolean** variable named `a` that's true.\nOn the second line declare a **number** variable named `b` with the value equal to `3.14`.\n\n```javascript\nvar ??? = ???\n??? ??? = ???\n```\n",
      "answers": [
          {
              "text": "a",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "true",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "var",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "b",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "3.14",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "\"3.14\"",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "True",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "\"true\"",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "const",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "number",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "boolean",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "'3.14'",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "'true'",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Which of the following statements is considered true?\n\n???\n",
      "answers": [
          {
              "text": "The number type in JavaScript support both whole and decimal numbers",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Boolean type has three options",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "You need the `Math` object to add numbers",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Boolean types use **Upper case**",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Can you change a variable's type in JavaScript?\n\n???\n",
      "answers": [
          {
              "text": "yes",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "no",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "only if you declare it again",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Which one of the following is **not** a primitive type:\n\n???\n",
      "answers": [
          {
              "text": "RegExp",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Symbol",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "String",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Number",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Not initializing a variable sets its value to ???.\n",
      "answers": [
          {
              "text": "undefined",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "null",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "the default one",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What will the following statement evaluate to?\n\n    undefined == null\n    // ???\n",
      "answers": [
          {
              "text": "true",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "false",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types",
      "author": "pawel",
      "category": "must-know",
      "question": "What is the output of the following code?\n\n```javascript\nconsole.log(\"\" == \"0\")\nconsole.log(\"\" === \"0\")\nconsole.log(\" \\t\\r\\n\" == 0)\n// ???\n```\n",
      "answers": [
          {
              "text": "`false false true`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`false true false`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`true false true`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`true false false`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`true true true`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`false true true`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types",
      "author": "pawel",
      "category": "must-know",
      "question": "What will the following code output?\n\n```javascript\nconsole.log(0 == \"\");\nconsole.log(\"\\n\" == 0);\n// ???\n```\n",
      "answers": [
          {
              "text": "`true true`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`true false`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`false true`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`false false`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types-ii",
      "author": "Bruno",
      "category": "tip",
      "question": "What does the following return? ???\n\n```javascript\ntypeof new Date();\n```\n",
      "answers": [
          {
              "text": "An object",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Null",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "A date",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Undefined",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types-ii",
      "author": "Bruno",
      "category": "tip",
      "question": "`typeof(new Array())`  returns ??? and nothing more specific.\n",
      "answers": [
          {
              "text": "object",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "null",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "var",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Array()",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types-ii",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What will the following snippet evaluate to?\n\n```javascript\nnull == undefined\n// ???\n```\n",
      "answers": [
          {
              "text": "false",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "true",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "error",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types-ii",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What will the following snippet evaluate to?\n\n```javascript\nnull == false\n// ???\n```\n",
      "answers": [
          {
              "text": "false",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "true",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types-ii",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "A null object is ???.\n",
      "answers": [
          {
              "text": "falsy",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "truthy",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "neither falsy nor truthy.",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "core",
      "lesson": "types-ii",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "An empty string is ???.\n",
      "answers": [
          {
              "text": "falsy",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "truthy",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "neither falsy nor truthy",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "array-updates",
      "author": "lizTheDeveloper",
      "category": "feature",
      "question": "Complete the code example to create an array that looks like this:\n`['7','3','4','5','6','7']`\n\n```javascript\nlet ints = ['1','2','3','4','5','6','7'];\nints.copyWithin(???,???,???)\n```\n",
      "answers": [
          {
              "text": "1",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "2",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "3",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "4",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "5",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "6",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "7",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "8",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "9",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "0",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "array-updates",
      "author": "lizTheDeveloper",
      "category": "feature",
      "question": "Complete the code example to create an array that looks like this:\n`['1','2','1','2','5','6']`\n\n    let ints = ['1','2','3','4','5','6'];\n    ints.copyWithin(???,???,???)\n",
      "answers": [
          {
              "text": "1",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "2",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "3",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "4",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "5",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "6",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "7",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "8",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "9",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "0",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "array-updates",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "What will the following code do?\n\n```javascript\nvar enki = [\"e\", \"n\", \"k\", \"i\"]\n\nvar enkiIterator = enki.keys()\n\nconsole.log(enki[enkiIterator.next().value])\n// ???\n```\n",
      "answers": [
          {
              "text": "log e",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "log en",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "raise an error",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "log undefined",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "array-updates",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Fill in the gaps such that an iterator will be created from the given array and the code won't raise any errors. The last gap should be completed with the right output of the expression above:\n\n```javascript\nvar arr = [3, 1, 4]\n\nvar arrIt = arr.???()\n\nvar first = arrIt.???()\nconsole.log(first.value[0])\n// 0\nconsole.log(first.???[???])\n// 3\nvar second = arrIt.next()\nconsole.log(???.value)\n// ???\n```\n",
      "answers": [
          {
              "text": "entries",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "next",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "value",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "1",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "second",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "[1, 1]",
              "correct": true,
              "correctIndex": 5
          },
          {
              "text": "[1, 4]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[0, 1]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "first",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "keys",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "iterator",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "toIterator",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "key",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "3",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "0",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "array-updates",
      "author": "lizTheDeveloper",
      "category": "feature",
      "question": "Find the first number divisible by `4`:\n\n    let ints = ['6','2','5','6','5','8'];\n    ints.???(???)\n",
      "answers": [
          {
              "text": "`find`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`findIndex`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`fill`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`includes`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`get`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`filter`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`function (e) {return e % 4}`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`function (e) {return e = 4}`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`function (e) {return e == 4}`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "array-updates",
      "author": "lizTheDeveloper",
      "category": "feature",
      "question": "Fill the array with the first number divisible by `2` and `3`:\n\n    let ints = []'2','5','4','5','6','5','8'];\n    ints.???(ints.???(???))\n",
      "answers": [
          {
              "text": "`find`",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "`findIndex`",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "`fill`",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "`includes`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`get`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`filter`",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "`function (e) {return e % 2 && e % 3}`",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "classes-modules",
      "author": "alexjmackey",
      "category": "feature",
      "question": "Fill in the class definition below such that the log statements at the end of the snippet hold true.\n\n```javascript\n??? ??? {\n  ???(width, length) {\n    ???.width = ???\n    ??? = length\n  }\n}\n\nconst myRec = ??? Rectangle(20, 30)\nconsole.log(myRec.width)\n// 20\nconsole.log(myRec.length)\n// 30\n```\n",
      "answers": [
          {
              "text": "class",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Rectangle",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "constructor",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "this",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "width",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "this.length",
              "correct": true,
              "correctIndex": 5
          },
          {
              "text": "new",
              "correct": true,
              "correctIndex": 6
          },
          {
              "text": "super",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "this.width",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "myClass",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "new Class",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "inherit",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "inheritance",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "data",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "classes-modules",
      "author": "alexjmackey",
      "category": "feature",
      "question": "How would you assign a variable passed to the constructor to a class?\n\n```javascript\nclass Sphere() {\n  constructor(radius) {\n    ??? = 4 / 3 * Math.PI *\n      Math.pow(radius, 3)\n  }\n}\n```\n",
      "answers": [
          {
              "text": "this.volume",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "const volume",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "let volume",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "classes-modules",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Given the class:\n\n```javascript\nclass Utils {\n  static NotFound404() {\n    return new Error({\n      statusCode: 404,\n      message: 'not found'\n    })\n  }\n}\n```\n\nWhich of the following method calls do you think is correct?\n\n```javascript\nthrow Utils.NotFound404() //1\nthrow (new Utils()).NotFound404() // 2\nthrow new Utils().NotFound404() // 3\nthrow Utils().NotFound404() // 4\n```\n\n???\n",
      "answers": [
          {
              "text": "1",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "2",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "3",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "4",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "classes-modules",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Consider the following ES6 class:\n\n```javascript\nclass Animal {\n  constructor(name) {\n    this.name = name\n  }\n}\n```\n\nFill in the next snippet such that the `Dog` class is a child of the `Animal` class. In addition, this class should call its parent's constructor, given the same arguments and have a static method `bark` which will print \"Woof woof\".\n\n```javascript\n??? ??? ??? ???{\n  ???(name) {\n    ???(name)\n  }\n\n  ??? ??? {\n    console.log(\"Woof Woof\")\n  }\n}\n```\n",
      "answers": [
          {
              "text": "class",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "Dog",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "extends",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "Animal",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "constructor",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "super",
              "correct": true,
              "correctIndex": 5
          },
          {
              "text": "static",
              "correct": true,
              "correctIndex": 6
          },
          {
              "text": "bark()",
              "correct": true,
              "correctIndex": 7
          },
          {
              "text": "barks",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "bark(name)",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "bark:",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "extend",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "Bark",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "super()",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "parent",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "childOf",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "classes-modules",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "How do you expose a method in a ES6 module file?\n\n```javascript\n// myModule.js\n\nexport function myFunc() {\n  // function code here\n}\n\n??? myFunc\n```\n",
      "answers": [
          {
              "text": "export",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "exports",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "module.exports",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "exports.",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "expose",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "import",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "classes-modules",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Fill in the missing keywords in the canonic ES6 module import syntax:\n\n```javascript\n??? module ???\n  moduleRename ??? 'path';\n```\n",
      "answers": [
          {
              "text": "import",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "as",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "from",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "new",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "require",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "like",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "imports",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "export",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "exports",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "classes-modules",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "The first snippet below represents the module file that should export two functions. The second represents the file in which the module functions are imported.\n\nFill in the gaps on both snippets such that the log statements hold true:\n\nUtilities module:\n\n```javascript\n// utils.js\n\nfunction add(x, y) {\n  return x + y;\n}\n\nfunction subtract(x, y) {\n  return x - y;\n}\n\n??? ???, ???;\n```\n\nMain file:\n\n```javascript\n??? {\n  add ??? addTwo,\n  subtract ???\n} ??? 'utils'\n\nconsole.log(addTwo(2, 4))\n// 6\nconsole.log(subtractTwo(5, 3))\n// 2\n```\n",
      "answers": [
          {
              "text": "export",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "{ add",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "subtract }",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "import",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "as",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "as subtractTwo",
              "correct": true,
              "correctIndex": 5
          },
          {
              "text": "from",
              "correct": true,
              "correctIndex": 6
          },
          {
              "text": "add",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "subtract",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "modules.exports",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "{",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "}",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "require",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "path",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "classes-modules",
      "author": "alexjmackey",
      "category": "must-know",
      "question": "Fill in the gaps such that the `log` file is exported properly and can be imported as shown:\n\nModule file:\n\n```javascript\n// logger.js\n??? ??? function log() {\n  console.log('My log')\n}\n```\n\nMain file:\n\n```javascript\n??? log ??? simpleLog\n  ??? 'logger'\n```\n",
      "answers": [
          {
              "text": "export",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "default",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "import",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "as",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "from",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "require",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "exports",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "exposes",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "default export",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "module.exports",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "export.log",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "name",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "path",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "get",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "rename",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "destructuring",
      "author": "alexjmackey",
      "category": "feature",
      "question": "Swap `a` and `b` using ES6 destructuring:\n\n```javascript\nlet a = 'foo'\nlet b = 'bar'\n\n[a ???] = ???\nconsole.log(a) // bar\nconsole.log(b) // foo\n```\n",
      "answers": [
          {
              "text": ", b",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "[b, a]",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "[, a]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "a",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "b",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": ", a",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[a]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[b]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[a, b]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": ",",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "destructuring",
      "author": "alexjmackey",
      "category": "feature",
      "question": "What will be the output of the following statements:\n\n```javascript\nfunction squareNums(nums) {\n  return nums.map(function(num) {\n    return num * num\n  })\n}\n\nconst [a, b] = squareNums([3, 4, 5])\nconsole.log(a)\n// ???\nconsole.log(b)\n// ???\n```\n",
      "answers": [
          {
              "text": "9",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "16",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "error",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[9, 16]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[16, 25]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[9, 25]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "25",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "0",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "undefined",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "null",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "destructuring",
      "author": "alexjmackey",
      "category": "feature",
      "question": "What will be the value of `a` at the end of the code execution?\n\n```javascript\nconst obj = {\n  a: 'b'\n}\n\nconst {a: b, c = 'a'} = obj\n// a = ???\n```\n",
      "answers": [
          {
              "text": "undefined",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "'b'",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "c",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "b",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "obj",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "null",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "'a'",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "destructuring",
      "author": "alexjmackey",
      "category": "feature",
      "question": "Complete the destructuring assignment such that the log statements are correct:\n\n```javascript\nconst obj = {\n  a: 3\n}\n\nconst {??? ??? ???,\n  ??? ??? ??? } = obj;\nconsole.log(foo)\n// 3\nconsole.log(bar)\n// 20\n```\n",
      "answers": [
          {
              "text": "a",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": ":",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "foo",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "bar",
              "correct": true,
              "correctIndex": 3
          },
          {
              "text": "=",
              "correct": true,
              "correctIndex": 4
          },
          {
              "text": "20",
              "correct": true,
              "correctIndex": 5
          },
          {
              "text": "as",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "3",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "==",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": ": foo",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": ": bar",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": ": 20",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "destructuring",
      "author": "alexjmackey",
      "category": "feature",
      "question": "Fill in the gaps such that the variables will have the commented value:\n\n```javascript\nlet x, y, z;\n[??? ??? ???] = [5, 10, 15]\n// x == 5\nconsole.log(y)\n// y == undefined\nconsole.log(z)\n// z == 15\n```\n",
      "answers": [
          {
              "text": "x,",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": ",",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": ",z",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "x",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "y",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": ",y",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "y,",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "z",
              "correct": false,
              "correctIndex": null
          }
      ]
  },
  {
      "topic": "javascript",
      "course": "ecmascript-2015",
      "lesson": "destructuring",
      "author": "alexjmackey",
      "category": "feature",
      "question": "What will be the value of `x`, `y` and `z`?\n\n```javascript\nlet x, y, z;\n[x, ,z] = [10, 20, 30];\n// x = ???\n// y = ???\n// z = ???\n```\n",
      "answers": [
          {
              "text": "10",
              "correct": true,
              "correctIndex": 0
          },
          {
              "text": "undefined",
              "correct": true,
              "correctIndex": 1
          },
          {
              "text": "30",
              "correct": true,
              "correctIndex": 2
          },
          {
              "text": "20",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[20]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[10, 30]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[10, 20]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[20, 30]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[10, 20, 30]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "null",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[10]",
              "correct": false,
              "correctIndex": null
          },
          {
              "text": "[30]",
              "correct": false,
              "correctIndex": null
          }
      ]
  }
]
